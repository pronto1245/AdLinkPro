#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const acme = require('acme-client');

async function setupSSLForDomain(domain) {
  console.log(`üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Let's Encrypt –¥–∞–Ω–Ω—ã—Ö
    const letsEncryptDir = path.join(process.cwd(), '.letsencrypt');
    const publicDir = path.join(process.cwd(), 'public', '.well-known', 'acme-challenge');
    
    if (!fs.existsSync(letsEncryptDir)) {
      fs.mkdirSync(letsEncryptDir, { recursive: true });
    }
    
    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true });
    }
    
    console.log('üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞
    const accountKeyPath = path.join(letsEncryptDir, 'account.key');
    let accountKey;
    
    if (fs.existsSync(accountKeyPath)) {
      console.log('üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞');
      accountKey = fs.readFileSync(accountKeyPath);
    } else {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞');
      accountKey = await acme.forge.createPrivateKey();
      fs.writeFileSync(accountKeyPath, accountKey);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ACME –∫–ª–∏–µ–Ω—Ç (staging –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    const client = new acme.Client({
      directoryUrl: acme.directory.letsencrypt.staging, // –ò—Å–ø–æ–ª—å–∑—É–µ–º staging –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      accountKey
    });

    console.log('üåê ACME –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –°–æ–∑–¥–∞–µ–º CSR –¥–ª—è –¥–æ–º–µ–Ω–∞
    const [certificateKey, csr] = await acme.forge.createCsr({
      commonName: domain
    });

    console.log('üìù CSR —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞');

    // –ó–∞–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    const certificate = await client.auto({
      csr,
      email: 'admin@example.com',
      termsOfServiceAgreed: true,
      challengeCreateFn: async (authz, challenge, keyAuthorization) => {
        console.log(`üéØ Challenge —Å–æ–∑–¥–∞–Ω –¥–ª—è ${authz.identifier.value}`);
        
        if (challenge.type === 'http-01') {
          const challengePath = path.join(publicDir, challenge.token);
          fs.writeFileSync(challengePath, keyAuthorization);
          console.log(`üíæ Challenge —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${challenge.token}`);
        }
      },
      challengeRemoveFn: async (authz, challenge, keyAuthorization) => {
        console.log(`üßπ Challenge —É–¥–∞–ª–µ–Ω –¥–ª—è ${authz.identifier.value}`);
        
        if (challenge.type === 'http-01') {
          const challengePath = path.join(publicDir, challenge.token);
          if (fs.existsSync(challengePath)) {
            fs.unlinkSync(challengePath);
          }
        }
      }
    });

    console.log('üéâ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω!');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
    const certPath = path.join(letsEncryptDir, `${domain}.crt`);
    const keyPath = path.join(letsEncryptDir, `${domain}.key`);
    
    fs.writeFileSync(certPath, certificate);
    fs.writeFileSync(keyPath, certificateKey);

    console.log(`‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è ${domain}`);
    console.log(`üìÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certPath}`);
    console.log(`üîë –ö–ª—é—á: ${keyPath}`);

    return {
      certificate,
      privateKey: certificateKey,
      certPath,
      keyPath
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const domain = process.argv[2];
  if (!domain) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node ssl-setup-domain.js <domain>');
    process.exit(1);
  }
  
  setupSSLForDomain(domain)
    .then(() => {
      console.log('üéØ SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞ SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
      process.exit(1);
    });
}

module.exports = { setupSSLForDomain };