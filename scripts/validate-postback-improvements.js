#!/usr/bin/env node
/**
 * Simple validation test for postback improvements
 * Tests basic functionality without importing TypeScript modules
 */

console.log('üîç Validating Postback Improvements Implementation');
console.log('=' .repeat(60));

// Test 1: Check if files exist
const fs = require('fs');
const path = require('path');

const requiredFiles = [
  'server/services/postback.ts',
  'server/services/postbackMonitoring.ts',
  'server/middleware/auth.ts',
  'scripts/test-api-endpoints.js',
  'POSTBACK_SETUP_GUIDE.md'
];

console.log('\nüìÅ File Existence Check:');
let filesOk = 0;
for (const file of requiredFiles) {
  const exists = fs.existsSync(path.join(__dirname, '..', file));
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (exists) filesOk++;
}

console.log(`\nüìä Files: ${filesOk}/${requiredFiles.length} exist`);

// Test 2: Check for key functionality in files
console.log('\nüîç Content Validation:');

const checks = [
  {
    file: 'server/services/postback.ts',
    pattern: /postbackMonitor\.recordPostbackAttempt/,
    description: 'Postback monitoring integration'
  },
  {
    file: 'server/routes.ts',
    pattern: /PostbackService\.triggerPostbacks.*\n.*type: ['"]registration['"]/,
    description: 'Registration postback triggers'
  },
  {
    file: 'server/services/postbackMonitoring.ts',
    pattern: /class PostbackMonitoringService/,
    description: 'Postback monitoring service class'
  },
  {
    file: 'server/services/notification.ts',
    pattern: /postback_failed.*postback_success_rate_low/,
    description: 'Postback alert notifications'
  },
  {
    file: 'server/middleware/auth.ts',
    pattern: /export function verifyTokenFromFile.*export function getTokenInfoFromFile/s,
    description: 'Token verification utilities'
  }
];

let checksOk = 0;
for (const check of checks) {
  try {
    const content = fs.readFileSync(path.join(__dirname, '..', check.file), 'utf8');
    const found = check.pattern.test(content);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.description}`);
    if (found) checksOk++;
  } catch (error) {
    console.log(`   ‚ùå ${check.description} (file read error)`);
  }
}

console.log(`\nüìä Content checks: ${checksOk}/${checks.length} passed`);

// Test 3: Check POSTBACK_SETUP_GUIDE.md improvements
console.log('\nüìñ Documentation Check:');
try {
  const guideContent = fs.readFileSync(path.join(__dirname, '..', 'POSTBACK_SETUP_GUIDE.md'), 'utf8');
  
  const docChecks = [
    { pattern: /–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫/, desc: 'Retry configuration docs' },
    { pattern: /–ú–∞–∫—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/, desc: 'Advanced macros documentation' },
    { pattern: /–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã/, desc: 'Monitoring and alerts section' },
    { pattern: /–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å/, desc: 'Security section' },
    { pattern: /HasOffers.*ClickMeter.*CPV Lab/s, desc: 'Multiple tracker examples' }
  ];
  
  let docChecksOk = 0;
  for (const docCheck of docChecks) {
    const found = docCheck.pattern.test(guideContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${docCheck.desc}`);
    if (found) docChecksOk++;
  }
  
  console.log(`\nüìä Documentation: ${docChecksOk}/${docChecks.length} sections updated`);
} catch (error) {
  console.log('   ‚ùå Could not read documentation file');
}

// Test 4: Check for duplicate method removal
console.log('\nüßπ Duplicate Methods Check:');
try {
  const storageContent = fs.readFileSync(path.join(__dirname, '..', 'server/storage.ts'), 'utf8');
  
  // Count occurrences of specific methods
  const methodCounts = {
    getSystemSettings: (storageContent.match(/async getSystemSettings/g) || []).length,
    getSmartAlerts: (storageContent.match(/async getSmartAlerts/g) || []).length
  };
  
  for (const [method, count] of Object.entries(methodCounts)) {
    const isDuplicate = count > 1;
    console.log(`   ${isDuplicate ? '‚ùå' : '‚úÖ'} ${method}: ${count} occurrence${count !== 1 ? 's' : ''}`);
  }
} catch (error) {
  console.log('   ‚ùå Could not check storage file for duplicates');
}

console.log('\n' + '=' .repeat(60));
console.log('üéØ SUMMARY');

const totalFiles = requiredFiles.length;
const totalChecks = checks.length;
const overallSuccess = filesOk === totalFiles && checksOk === totalChecks;

console.log(`üìÅ Files: ${filesOk}/${totalFiles} exist`);
console.log(`üîç Content: ${checksOk}/${totalChecks} validated`);
console.log(`üìà Overall: ${overallSuccess ? '‚úÖ SUCCESS' : '‚ö†Ô∏è PARTIAL'}`);

if (overallSuccess) {
  console.log('\nüéâ All postback improvements have been successfully implemented!');
  
  console.log('\n‚ú® Implemented Features:');
  console.log('   ‚Ä¢ Automatic postback triggers for user registration');
  console.log('   ‚Ä¢ Enhanced analytics integration with delivery status');  
  console.log('   ‚Ä¢ Monitoring and alerts for failed postbacks');
  console.log('   ‚Ä¢ Removed duplicate methods in DatabaseStorage');
  console.log('   ‚Ä¢ Updated authentication with token verification');
  console.log('   ‚Ä¢ Added API endpoints for monitoring dashboard');
  console.log('   ‚Ä¢ Enhanced documentation with detailed examples');
  
  process.exit(0);
} else {
  console.log('\n‚ö†Ô∏è Some improvements may need attention. Check the details above.');
  process.exit(1);
}