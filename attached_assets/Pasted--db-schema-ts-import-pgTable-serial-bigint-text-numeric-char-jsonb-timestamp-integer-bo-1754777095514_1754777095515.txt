// db/schema.ts
import { pgTable, serial, bigint, text, numeric, char, jsonb, timestamp, integer, boolean, smallint } from "drizzle-orm/pg-core";

export const conversions = pgTable("conversions", {
  id: serial("id").primaryKey(),
  advertiserId: bigint("advertiser_id", { mode: "number" }).notNull(),
  partnerId: bigint("partner_id", { mode: "number" }),
  campaignId: bigint("campaign_id", { mode: "number" }),
  offerId: bigint("offer_id", { mode: "number" }),
  flowId: bigint("flow_id", { mode: "number" }),

  clickid: text("clickid").notNull(),
  type: text("type").$type<"reg"|"purchase"|"rebill"|"refund"|"chargeback">().notNull(),
  txid: text("txid").notNull(),
  revenue: numeric("revenue", { precision: 18, scale: 6 }).default("0"),
  currency: char("currency", { length: 3 }),

  conversionStatus: text("conversion_status").$type<
    "initiated"|"pending"|"approved"|"declined"|"refunded"|"chargeback"|"duplicate"|"test"
  >().notNull(),

  statusUpdatedAt: timestamp("status_updated_at", { withTimezone: true }).defaultNow().notNull(),

  antifraudLevel: text("antifraud_level").$type<"ok"|"soft"|"hard">(),
  antifraudScore: integer("antifraud_score"),
  antifraudReasons: jsonb("antifraud_reasons").$type<Record<string, unknown>>().default({}),

  details: jsonb("details").$type<Record<string, unknown>>().default({}),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (t) => ({
  uniqTx: { columns: [t.advertiserId, t.type, t.txid], unique: true },
}));

export const postbackProfiles = pgTable("postback_profiles", {
  id: serial("id").primaryKey(),
  ownerScope: text("owner_scope").$type<"owner"|"advertiser"|"partner">().notNull(),
  ownerId: bigint("owner_id", { mode: "number" }).notNull(),

  scopeType: text("scope_type").$type<"global"|"campaign"|"offer"|"flow">().notNull(),
  scopeId: bigint("scope_id", { mode: "number" }),

  name: text("name").notNull(),
  enabled: boolean("enabled").default(true).notNull(),
  priority: integer("priority").default(100).notNull(),

  endpointUrl: text("endpoint_url").notNull(),
  method: text("method").$type<"GET"|"POST">().notNull(),
  idParam: text("id_param").$type<"subid"|"clickid">().notNull(),
  authQueryKey: text("auth_query_key"),
  authQueryVal: text("auth_query_val"),
  authHeaderName: text("auth_header_name"),
  authHeaderVal: text("auth_header_val"),

  paramsTemplate: jsonb("params_template").$type<Record<string, string>>().default({}).notNull(),
  statusMap: jsonb("status_map").$type<Record<string, Record<string, string>>>().default({}).notNull(),

  hmacEnabled: boolean("hmac_enabled").default(false).notNull(),
  hmacSecret: text("hmac_secret"),
  hmacPayloadTpl: text("hmac_payload_tpl"),
  hmacParamName: text("hmac_param_name"),

  retries: smallint("retries").default(5).notNull(),
  timeoutMs: integer("timeout_ms").default(4000).notNull(),
  backoffBaseSec: integer("backoff_base_sec").default(2).notNull(),

  filterRevenueGt0: boolean("filter_revenue_gt0").default(false).notNull(),
  filterExcludeFraudHard: boolean("filter_exclude_fraud_hard").default(true).notNull(),

  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
});

export const postbackDeliveries = pgTable("postback_deliveries", {
  id: serial("id").primaryKey(),
  profileId: integer("profile_id").notNull().references(() => postbackProfiles.id, { onDelete: "cascade" }),
  conversionId: integer("conversion_id").references(() => conversions.id),
  advertiserId: bigint("advertiser_id", { mode: "number" }).notNull(),
  partnerId: bigint("partner_id", { mode: "number" }),
  clickid: text("clickid").notNull(),
  type: text("type").notNull(),
  txid: text("txid").notNull(),
  statusMapped: text("status_mapped").notNull(),

  attempt: smallint("attempt").notNull(),
  maxAttempts: smallint("max_attempts").notNull(),
  requestMethod: text("request_method").notNull(),
  requestUrl: text("request_url").notNull(),
  requestBody: text("request_body"),
  requestHeaders: jsonb("request_headers"),
  responseCode: integer("response_code"),
  responseBody: text("response_body"),
  error: text("error"),
  durationMs: integer("duration_ms"),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
});
