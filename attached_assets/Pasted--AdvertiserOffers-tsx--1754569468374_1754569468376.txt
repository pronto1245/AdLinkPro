// ✅ AdvertiserOffers.tsx: офферы рекламодателя с предпросмотром лендинга, созданием, редактированием, фильтрацией, флагами, экспортом, drag’n’drop reorder, массовыми действиями и редактором лендингов, а также назначением офферов партнёрам с логикой запроса доступа и одобрения. Видимая вкладка "Архив" активна всегда.

import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogTrigger, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';
import { toast } from 'sonner';
import { Download, Edit, Flag, Plus, Trash2, Eye, Settings2, Users2, PenTool, Archive, Copy, Play, ArrowUp, ArrowDown, ExternalLink, GripVertical } from 'lucide-react';
import OfferEditModal from './OfferEditModal';
import OfferForm from './OfferForm';
import { apiRequest } from '@/lib/api';
import { formatNumber } from '@/lib/utils';
import { useLocation } from 'wouter';
import { DndContext, closestCenter } from '@dnd-kit/core';
import { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { restrictToVerticalAxis } from '@dnd-kit/modifiers';

function DraggableRow({ offer, index, children }: any) {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: offer.id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };
  return (
    <TableRow ref={setNodeRef} style={style} {...attributes}>
      <TableCell {...listeners} className="cursor-grab">
        <GripVertical className="w-4 h-4 text-muted-foreground" />
      </TableCell>
      {children}
    </TableRow>
  );
}

const AdvertiserOffers = () => {
  const queryClient = useQueryClient();
  const [, navigate] = useLocation();
  const [editOffer, setEditOffer] = useState(null);
  const [confirmDelete, setConfirmDelete] = useState<any>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [search, setSearch] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('active');
  const [selectedOffers, setSelectedOffers] = useState<string[]>([]);

  const { data: offers = [], isLoading } = useQuery({
    queryKey: ['offers'],
    queryFn: () => apiRequest('/offers'),
  });

  const updateMutation = useMutation({
    mutationFn: (data: any) =>
      data.id ? apiRequest(`/offers/${data.id}`, 'PATCH', data) : apiRequest(`/offers`, 'POST', data),
    onSuccess: () => {
      toast.success('Оффер сохранён');
      queryClient.invalidateQueries(['offers']);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (ids: string[]) => apiRequest(`/offers/bulk-delete`, 'POST', { ids }),
    onSuccess: () => {
      toast.success('Удалено');
      queryClient.invalidateQueries(['offers']);
      setSelectedOffers([]);
    },
  });

  const filtered = offers
    .filter(o => o.name.toLowerCase().includes(search.toLowerCase()))
    .filter(o => selectedStatus === 'all' || o.status === selectedStatus);

  const handleAction = (offer: any, action: string) => {
    switch (action) {
      case 'activate':
        updateMutation.mutate({ ...offer, status: 'active' });
        break;
      case 'archive':
        updateMutation.mutate({ ...offer, status: 'archived' });
        break;
      case 'duplicate':
        const duplicated = {
          ...offer,
          id: undefined,
          createdAt: undefined,
          updatedAt: undefined,
          name: offer.name + ' (копия)',
        };
        updateMutation.mutate(duplicated);
        break;
      case 'delete':
        setConfirmDelete(offer);
        break;
      case 'preview':
        if (offer?.landingUrls?.[0]) {
          window.open(offer.landingUrls[0], '_blank');
        } else {
          toast.warning('Нет доступной ссылки для предпросмотра');
        }
        break;
      case 'assign':
        navigate(`/advertiser/offers/${offer.id}/assign`);
        break;
      case 'edit-landing':
        navigate(`/advertiser/offers/${offer.id}/landing-editor`);
        break;
      default:
        break;
    }
  };

  return (
    // ... остальной JSX-код остаётся без изменений
  );
};

export default AdvertiserOffers;
