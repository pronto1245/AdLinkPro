#!/usr/bin/env node

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL –¥–ª—è arbiconnect.store

import fetch from 'node-fetch';
import fs from 'fs';

async function forceSSLUpgrade() {
  try {
    const token = fs.readFileSync('.current_token', 'utf8').trim();
    
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL –¥–ª—è arbiconnect.store...');
    
    const response = await fetch('http://localhost:5000/api/advertiser/profile/domains/94cacae2-3984-4cc2-8ece-86702b4bc4ac/verify', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('‚úÖ –î–æ–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, SSL –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', result.error);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞
    setTimeout(async () => {
      try {
        const statusResponse = await fetch('http://localhost:5000/api/advertiser/profile/domains', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        const domains = await statusResponse.json();
        const arbiDomain = domains.find(d => d.domain === 'arbiconnect.store');
        
        if (arbiDomain) {
          console.log('üè† –°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞ arbiconnect.store:');
          console.log('   - –°—Ç–∞—Ç—É—Å:', arbiDomain.status);
          console.log('   - SSL —Å—Ç–∞—Ç—É—Å:', arbiDomain.sslStatus);
          console.log('   - SSL –∏–∑–¥–∞—Ç–µ–ª—å:', arbiDomain.sslIssuer);
          console.log('   - –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', arbiDomain.sslValidUntil);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
      }
    }, 5000);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  }
}

forceSSLUpgrade();