#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DNS –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ SSL
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–≥–¥–∞ –¥–æ–º–µ–Ω setbet-arbit.ru –Ω–∞—á–Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞—à ACME handler
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–¥–∞—á—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 */

const http = require('http');

const DOMAIN = 'setbet-arbit.ru';
const TEST_PATH = '/.well-known/acme-challenge/test-new';
const EXPECTED_RESPONSE = 'test-file-1754911014';
const CHECK_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
const MAX_ATTEMPTS = 120; // 60 –º–∏–Ω—É—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

let attempts = 0;

function checkDNSAndTriggerSSL() {
  attempts++;
  
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${attempts}/${MAX_ATTEMPTS}: –¢–µ—Å—Ç–∏—Ä—É–µ–º DNS –¥–ª—è ${DOMAIN}...`);
  
  const options = {
    hostname: DOMAIN,
    port: 80,
    path: TEST_PATH,
    method: 'GET',
    timeout: 10000
  };

  const req = http.request(options, (res) => {
    let data = '';
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log(`üì° –û—Ç–≤–µ—Ç —Å ${DOMAIN}: "${data.trim()}"`);
      
      if (data.trim() === EXPECTED_RESPONSE) {
        console.log(`üéâ DNS –û–ë–ù–û–í–ò–õ–°–Ø! –î–æ–º–µ–Ω ${DOMAIN} —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä!`);
        console.log(`üîí –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–¥–∞—á—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º curl –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SSL
        const { spawn } = require('child_process');
        const curl = spawn('curl', [
          '-X', 'POST',
          '-H', 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
          'http://localhost:5000/api/advertiser/profile/domains/a032b338-cc91-4756-ae8d-fb564be9653e/ssl'
        ]);
        
        curl.on('close', (code) => {
          console.log(`‚úÖ SSL –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω (–∫–æ–¥: ${code})`);
          console.log(`‚è≥ –ñ–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...`);
          process.exit(0);
        });
        
        return;
      }
      
      if (attempts >= MAX_ATTEMPTS) {
        console.log(`‚ùå DNS –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∑–∞ ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS.`);
        process.exit(1);
      }
      
      console.log(`‚è≥ DNS –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...`);
      setTimeout(checkDNSAndTriggerSSL, CHECK_INTERVAL);
    });
  });

  req.on('error', (err) => {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${DOMAIN}: ${err.message}`);
    
    if (attempts >= MAX_ATTEMPTS) {
      console.log(`‚ùå DNS –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∑–∞ ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.`);
      process.exit(1);
    }
    
    console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...`);
    setTimeout(checkDNSAndTriggerSSL, CHECK_INTERVAL);
  });

  req.on('timeout', () => {
    console.log(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${DOMAIN}`);
    req.destroy();
    
    if (attempts >= MAX_ATTEMPTS) {
      console.log(`‚ùå DNS –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∑–∞ ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.`);
      process.exit(1);
    }
    
    setTimeout(checkDNSAndTriggerSSL, CHECK_INTERVAL);
  });

  req.end();
}

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DNS –¥–ª—è ${DOMAIN}`);
console.log(`üì° –ñ–¥–µ–º –∫–æ–≥–¥–∞ –¥–æ–º–µ–Ω –Ω–∞—á–Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å: "${EXPECTED_RESPONSE}"`);
console.log(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL/1000} —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫`);

checkDNSAndTriggerSSL();