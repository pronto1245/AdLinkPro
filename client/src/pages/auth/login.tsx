import React from 'react';
import { useLocation, Link } from 'wouter';
import { login as apiLogin, HOME as HOME_BY_ROLE } from '@/lib/auth';
import Brand from '@/components/Brand';
import './auth-ui.css';

type Props = { role?: 'partner' | 'advertiser' };

export default function Login({ role }: Props) {
  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [otp, setOtp] = React.useState('');
  const [error, setError] = React.useState<string | null>(null);
  const [loading, setLoading] = React.useState(false);
  const [, setLocation] = useLocation();

  const [forgotOpen, setForgotOpen] = React.useState(false);
  const [forgotEmail, setForgotEmail] = React.useState('');
  const [forgotError, setForgotError] = React.useState<string | null>(null);
  const [forgotLoading, setForgotLoading] = React.useState(false);
  const [forgotDone, setForgotDone] = React.useState(false);

  const params = new URLSearchParams(typeof window !== 'undefined' ? window.location.search : '');
  const next = params.get('next');

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    setLoading(true);
    try {
      const { user } = await apiLogin({ email, password, otp: otp || undefined, role });
      const home = HOME_BY_ROLE[((role ?? (user as any)?.role) as any)] || '/';
      setLocation(next || home);
    } catch (e: any) {
      setError(e?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    } finally {
      setLoading(false);
    }
  }

  async function onForgotSubmit(e: React.FormEvent) {
    e.preventDefault();
    setForgotError(null);
    if (!forgotEmail.trim()) { setForgotError('–£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É'); return; }
    setForgotLoading(true);
    try {
      await new Promise(r => setTimeout(r, 400));
      setForgotDone(true);
    } catch (e: any) {
      setForgotError(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ');
    } finally {
      setForgotLoading(false);
    }
  }

  function closeForgot() {
    setForgotOpen(false);
    setForgotError(null);
    setForgotLoading(false);
    setForgotDone(false);
  }

  return (
    <div className="auth-wrap">
      <div>
        <Brand />
        <div className="auth-card">
          <h1 className="auth-title">
            {role === 'partner' ? '–í—Ö–æ–¥ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤' : role === 'advertiser' ? '–í—Ö–æ–¥ –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π' : '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </h1>
          <p className="auth-sub">–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</p>

          <form onSubmit={onSubmit}>
            <div className="auth-field">
              <label>Email</label>
              <input autoFocus value={email} onChange={e => setEmail(e.target.value)} type="email" required />
            </div>
            <div className="auth-field">
              <label>–ü–∞—Ä–æ–ª—å</label>
              <input value={password} onChange={e => setPassword(e.target.value)} type="password" required />
            </div>
            <div style={{display:'flex',justifyContent:'flex-end',marginTop:-6,marginBottom:10}}>
              <button type="button" className="link" onClick={()=>setForgotOpen(true)}>–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</button>
            </div>
            <div className="auth-field">
              <label>–ö–æ–¥ 2FA (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)</label>
              <input value={otp} onChange={e => setOtp(e.target.value)} inputMode="numeric" />
            </div>
            {error && <div className="auth-error">{error}</div>}
            <div className="auth-actions">
              <button className="auth-btn" disabled={loading} type="submit">{loading ? '–í—Ö–æ–¥–∏–º‚Ä¶' : '–í–æ–π—Ç–∏'}</button>
            </div>
          </form>

          <div className="auth-sub" style={{ textAlign: 'center', marginTop: 12 }}>–ï—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?</div>
          <div className="auth-ctas">
            <Link className="auth-btn outline" href="/register/partner">ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º</Link>
            <Link className="auth-btn outline" href="/register/advertiser">üìÑ –°—Ç–∞—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º</Link>
          </div>
        </div>
      </div>

      {forgotOpen && (
        <div className="modal-backdrop" onClick={(e)=>{ if(e.target===e.currentTarget) closeForgot(); }}>
          <div className="modal" role="dialog" aria-modal="true" aria-labelledby="forgot-title">
            {!forgotDone ? (
              <>
                <h2 id="forgot-title">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
                <p>–£–∫–∞–∂–∏—Ç–µ email, –Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</p>
                <form onSubmit={onForgotSubmit}>
                  <div className="auth-field">
                    <label>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ *</label>
                    <input type="email" value={forgotEmail} onChange={e=>setForgotEmail(e.target.value)} required />
                  </div>
                  {forgotError && <div className="auth-error">{forgotError}</div>}
                  <div className="modal-actions">
                    <button type="button" className="auth-btn btn-ghost" onClick={closeForgot}>–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" className="auth-btn" disabled={forgotLoading}>
                      {forgotLoading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                    </button>
                  </div>
                </form>
              </>
            ) : (
              <>
                <h2 id="forgot-title">–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</h2>
                <div className="auth-success">
                  –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –Ω–∞ {forgotEmail}.
                  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –≤ –ø–∏—Å—å–º–µ.
                </div>
                <div className="modal-actions">
                  <button type="button" className="auth-btn" onClick={closeForgot}>–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
