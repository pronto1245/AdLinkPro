import { useState } from 'react';
import { useLocation } from 'wouter';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Plus, Minus, Upload, Image, Globe, DollarSign, Target, Settings, ArrowLeft, Save, Eye, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import RoleBasedLayout from '@/components/layout/RoleBasedLayout';
import { apiRequest } from '@/lib/queryClient';

interface OfferFormData {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  name: string;
  description: { ru: string; en: string };
  category: string;
  logo: string;
  
  // GEO –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  geoTargeting: string[];
  allowedDevices: string[];
  allowedOs: string[];
  
  // –°—Å—ã–ª–∫–∏
  targetUrl: string;
  postbackUrl: string;
  hasGlobalGeoSetting: boolean;
  hasGlobalPayoutSetting: boolean;
  globalGeo: string;
  globalPayout: string;
  landingPages: Array<{
    id: string;
    name: string;
    url: string;
    geo?: string;
    payout?: string;
    hasCustomGeo?: boolean;
    hasCustomPayout?: boolean;
    isDefault: boolean;
  }>;
  
  // –í—ã–ø–ª–∞—Ç—ã
  payoutType: 'cpa' | 'cpl' | 'cps' | 'revshare' | 'hybrid';
  payoutAmount: number;
  currency: string;
  
  // –£—Å–ª–æ–≤–∏—è
  partnerApprovalType: 'auto' | 'manual' | 'invite_only';
  trafficSources: string[];
  deniedSources: string[];
  trafficRequirements: string;
  
  // –ö–µ–ø—ã –∏ –ª–∏–º–∏—Ç—ã
  dailyLimit: number;
  monthlyLimit: number;
  
  // –ê–Ω—Ç–∏—Ñ—Ä–æ–¥
  antifraudEnabled: boolean;
  antifraudMethods: string[];
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  kycRequired: boolean;
  isPrivate: boolean;
  allowCustomDomains: boolean;
  customDomains: string[];
  
  // –ú–µ—Ç–∞ –¥–∞–Ω–Ω—ã–µ
  tags: string[];
  kpi: string;
  status: 'draft' | 'active' | 'paused';
}

const initialFormData: OfferFormData = {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  name: '',
  description: { ru: '', en: '' },
  category: '',
  logo: '',
  
  // GEO –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  geoTargeting: [],
  allowedDevices: [],
  allowedOs: [],
  
  // –°—Å—ã–ª–∫–∏
  targetUrl: '',
  postbackUrl: '',
  hasGlobalGeoSetting: false,
  hasGlobalPayoutSetting: false,
  globalGeo: '',
  globalPayout: '',
  landingPages: [{ id: '1', name: '–û—Å–Ω–æ–≤–Ω–∞—è', url: '', geo: '', payout: '', hasCustomGeo: false, hasCustomPayout: false, isDefault: true }],
  
  // –í—ã–ø–ª–∞—Ç—ã
  payoutType: 'cpa',
  payoutAmount: 0,
  currency: 'USD',
  
  // –£—Å–ª–æ–≤–∏—è
  partnerApprovalType: 'auto',
  trafficSources: [],
  deniedSources: [],
  trafficRequirements: '',
  
  // –ö–µ–ø—ã –∏ –ª–∏–º–∏—Ç—ã
  dailyLimit: 0,
  monthlyLimit: 0,
  
  // –ê–Ω—Ç–∏—Ñ—Ä–æ–¥
  antifraudEnabled: true,
  antifraudMethods: [],
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  kycRequired: false,
  isPrivate: false,
  allowCustomDomains: false,
  customDomains: [],
  
  // –ú–µ—Ç–∞ –¥–∞–Ω–Ω—ã–µ
  tags: [],
  kpi: '',
  status: 'draft'
};

const categories = [
  'gambling', 'dating', 'crypto', 'betting', 'e-commerce', 
  'gaming', 'finance', 'health', 'vpn', 'antivirus', 'education',
  'software', 'mobile_apps', 'nutra', 'beauty'
];

const verticals = [
  'Casino', 'Sports Betting', 'Adult Dating', 'Mainstream Dating',
  'Forex', 'Binary Options', 'Crypto Trading', 'Insurance',
  'Nutra', 'Beauty', 'Mobile Apps', 'Software', 'VPN Services',
  'Antivirus', 'E-commerce', 'Gambling', 'Betting'
];

const countries = [
  { code: 'IN', name: 'üáÆüá≥ –ò–Ω–¥–∏—è' },
  { code: 'BR', name: 'üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è' },
  { code: 'RU', name: 'üá∑üá∫ –†–æ—Å—Å–∏—è' },
  { code: 'BD', name: 'üáßüá© –ë–∞–Ω–≥–ª–∞–¥–µ—à' },
  { code: 'US', name: 'üá∫üá∏ –°–®–ê' },
  { code: 'UK', name: 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è' },
  { code: 'DE', name: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è' },
  { code: 'FR', name: 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è' },
  { code: 'JP', name: 'üáØüáµ –Ø–ø–æ–Ω–∏—è' },
  { code: 'KR', name: 'üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è' },
  { code: 'TR', name: 'üáπüá∑ –¢—É—Ä—Ü–∏—è' },
  { code: 'TH', name: 'üáπüá≠ –¢–∞–∏–ª–∞–Ω–¥' },
  { code: 'ID', name: 'üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è' },
  { code: 'MY', name: 'üá≤üáæ –ú–∞–ª–∞–π–∑–∏—è' },
  { code: 'PH', name: 'üáµüá≠ –§–∏–ª–∏–ø–ø–∏–Ω—ã' }
];

const allowedTrafficSources = [
  'Push', 'Popunder', 'Google Ads', 'Facebook Ads', 'TikTok Ads', 
  'Instagram', 'YouTube Ads', 'Native', 'UAC', 'SEO', 'Email', 
  'WhatsApp', 'Telegram', 'Motivated', 'In-App', 'Cloaking', 
  'Bot', 'Farm', 'Doros', 'APK', 'VK', 'Discord', 'Phishing', 
  'Autoredirect', 'Proxy/VPN', 'Twitter/X'
];

const deniedTrafficSources = [
  'Adult Traffic', 'Motivational Traffic', 'Incentive Traffic', 'Bot Traffic',
  'Click Spam', 'Fraud Traffic', 'Toolbar Traffic', 'Expired Domain Traffic',
  'Spam Email', 'Auto-surf Traffic', 'Forced Clicks', 'PTC Sites'
];

const deviceTypes = [
  { value: 'mobile', label: '–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' },
  { value: 'desktop', label: '–î–µ—Å–∫—Ç–æ–ø' },
  { value: 'tablet', label: '–ü–ª–∞–Ω—à–µ—Ç—ã' }
];

const osTypes = [
  { value: 'android', label: 'Android' },
  { value: 'ios', label: 'iOS' },
  { value: 'windows', label: 'Windows' },
  { value: 'mac', label: 'macOS' },
  { value: 'linux', label: 'Linux' }
];

const antifraudMethods = [
  { value: 'ip', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤' },
  { value: 'vpn', label: '–î–µ—Ç–µ–∫—Ü–∏—è VPN/Proxy' },
  { value: 'bot', label: '–ó–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤' },
  { value: 'ctr', label: '–ê–Ω–∞–ª–∏–∑ CTR' },
  { value: 'click_spam', label: '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫–ª–∏–∫—Å–ø–∞–º–∞' }
];

const languages = [
  { value: 'en', label: 'English' },
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'es', label: 'Espa√±ol' },
  { value: 'de', label: 'Deutsch' },
  { value: 'fr', label: 'Fran√ßais' },
  { value: 'it', label: 'Italiano' },
  { value: 'pt', label: 'Portugu√™s' },
  { value: 'zh', label: '‰∏≠Êñá' },
  { value: 'ja', label: 'Êó•Êú¨Ë™û' },
  { value: 'ko', label: 'ÌïúÍµ≠Ïñ¥' },
  { value: 'ar', label: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©' },
  { value: 'hi', label: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' },
  { value: 'th', label: '‡πÑ‡∏ó‡∏¢' },
  { value: 'tr', label: 'T√ºrk√ße' }
];

export default function CreateOffer() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  const [formData, setFormData] = useState<OfferFormData>(initialFormData);
  const [activeTab, setActiveTab] = useState('basic');
  const [newTag, setNewTag] = useState('');

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
  const createOfferMutation = useMutation({
    mutationFn: async (data: OfferFormData) => {
      return apiRequest('/api/advertiser/offers', 'POST', data);
    },
    onSuccess: (data) => {
      toast({
        title: '–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω',
        description: `–û—Ñ—Ñ–µ—Ä "${formData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
      });
      queryClient.invalidateQueries({ queryKey: ['/api/advertiser/offers'] });
      navigate('/advertiser/offers');
    },
    onError: (error) => {
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        variant: 'destructive'
      });
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤
  const { data: trackingDomains = [] } = useQuery({
    queryKey: ['/api/advertiser/tracking-domains'],
    queryFn: () => apiRequest('/api/advertiser/tracking-domains')
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!formData.name || !formData.category) {
      toast({
        title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
        variant: 'destructive'
      });
      return;
    }



    if (!formData.targetUrl) {
      toast({
        title: '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—Å—ã–ª–∫—É',
        description: '–¶–µ–ª–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (offer link) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
        variant: 'destructive'
      });
      return;
    }

    if (formData.payoutAmount <= 0) {
      toast({
        title: '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã',
        description: '–†–∞–∑–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è',
        variant: 'destructive'
      });
      return;
    }

    if (formData.geoTargeting.length === 0) {
      toast({
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ',
        description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É',
        variant: 'destructive'
      });
      return;
    }

    createOfferMutation.mutate(formData);
  };

  const addLandingPage = () => {
    const newLanding = {
      id: Date.now().toString(),
      name: `–õ–µ–Ω–¥–∏–Ω–≥ ${formData.landingPages.length + 1}`,
      url: '',
      geo: formData.hasGlobalGeoSetting ? '' : formData.globalGeo,
      payout: formData.hasGlobalPayoutSetting ? '' : formData.globalPayout,
      hasCustomGeo: formData.hasGlobalGeoSetting,
      hasCustomPayout: formData.hasGlobalPayoutSetting,
      isDefault: false
    };
    setFormData(prev => ({
      ...prev,
      landingPages: [...prev.landingPages, newLanding]
    }));
  };

  const removeLandingPage = (id: string) => {
    if (formData.landingPages.length <= 1) return;
    setFormData(prev => ({
      ...prev,
      landingPages: prev.landingPages.filter(lp => lp.id !== id)
    }));
  };

  const updateLandingPage = (id: string, field: string, value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      landingPages: prev.landingPages.map(lp =>
        lp.id === id ? { ...lp, [field]: value } : lp
      )
    }));
  };

  const addTag = () => {
    if (newTag && !formData.tags.includes(newTag)) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tag: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const toggleGeoTarget = (countryCode: string) => {
    setFormData(prev => ({
      ...prev,
      geoTargeting: prev.geoTargeting.includes(countryCode)
        ? prev.geoTargeting.filter(geo => geo !== countryCode)
        : [...prev.geoTargeting, countryCode]
    }));
  };

  const toggleTrafficSource = (source: string) => {
    setFormData(prev => ({
      ...prev,
      trafficSources: prev.trafficSources.includes(source)
        ? prev.trafficSources.filter(s => s !== source)
        : [...prev.trafficSources, source]
    }));
  };

  const toggleDeniedSource = (source: string) => {
    setFormData(prev => ({
      ...prev,
      deniedSources: prev.deniedSources.includes(source)
        ? prev.deniedSources.filter(s => s !== source)
        : [...prev.deniedSources, source]
    }));
  };

  const toggleDevice = (device: string) => {
    setFormData(prev => ({
      ...prev,
      allowedDevices: prev.allowedDevices.includes(device)
        ? prev.allowedDevices.filter(d => d !== device)
        : [...prev.allowedDevices, device]
    }));
  };

  const toggleOs = (os: string) => {
    setFormData(prev => ({
      ...prev,
      allowedOs: prev.allowedOs.includes(os)
        ? prev.allowedOs.filter(o => o !== os)
        : [...prev.allowedOs, os]
    }));
  };

  const toggleAntifraudMethod = (method: string) => {
    setFormData(prev => ({
      ...prev,
      antifraudMethods: prev.antifraudMethods.includes(method)
        ? prev.antifraudMethods.filter(m => m !== method)
        : [...prev.antifraudMethods, method]
    }));
  };

  const addCustomDomain = () => {
    const domain = prompt('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: track.yourdomain.com):');
    if (domain && !formData.customDomains.includes(domain)) {
      setFormData(prev => ({
        ...prev,
        customDomains: [...prev.customDomains, domain]
      }));
    }
  };

  const removeCustomDomain = (domain: string) => {
    setFormData(prev => ({
      ...prev,
      customDomains: prev.customDomains.filter(d => d !== domain)
    }));
  };

  return (
    <RoleBasedLayout>
      <div className="container mx-auto p-6 space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => navigate('/advertiser/offers')}
              data-testid="button-back"
              title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ—Ñ–µ—Ä–∞–º"
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div>
              <h1 className="text-3xl font-bold tracking-tight">–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞</h1>
              <p className="text-muted-foreground">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              onClick={() => navigate('/advertiser/offers')}
              data-testid="button-cancel"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={handleSubmit}
              disabled={createOfferMutation.isPending}
              data-testid="button-save-offer"
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Save className="h-4 w-4 mr-2" />
              {createOfferMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ñ—Ñ–µ—Ä'}
            </Button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger 
                value="basic" 
                className="flex items-center gap-2 data-[state=active]:bg-blue-100 dark:data-[state=active]:bg-blue-900 data-[state=active]:text-blue-700 dark:data-[state=active]:text-blue-300 hover:bg-blue-50 dark:hover:bg-blue-950"
                title="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ"
              >
                <Settings className="h-4 w-4 text-blue-600" />
                –û—Å–Ω–æ–≤–Ω–æ–µ
              </TabsTrigger>
              <TabsTrigger 
                value="links" 
                className="flex items-center gap-2 data-[state=active]:bg-purple-100 dark:data-[state=active]:bg-purple-900 data-[state=active]:text-purple-700 dark:data-[state=active]:text-purple-300 hover:bg-purple-50 dark:hover:bg-purple-950"
                title="–°—Å—ã–ª–∫–∏ –∏ –ª–µ–Ω–¥–∏–Ω–≥–∏"
              >
                <Target className="h-4 w-4 text-purple-600" />
                –°—Å—ã–ª–∫–∏
              </TabsTrigger>

              <TabsTrigger 
                value="targeting" 
                className="flex items-center gap-2 data-[state=active]:bg-orange-100 dark:data-[state=active]:bg-orange-900 data-[state=active]:text-orange-700 dark:data-[state=active]:text-orange-300 hover:bg-orange-50 dark:hover:bg-orange-950"
                title="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"
              >
                <Globe className="h-4 w-4 text-orange-600" />
                –ò—Å—Ç–æ—á–Ω–∏–∫–∏
              </TabsTrigger>
              <TabsTrigger 
                value="conditions" 
                className="flex items-center gap-2 data-[state=active]:bg-indigo-100 dark:data-[state=active]:bg-indigo-900 data-[state=active]:text-indigo-700 dark:data-[state=active]:text-indigo-300 hover:bg-indigo-50 dark:hover:bg-indigo-950"
                title="–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏"
              >
                <Settings className="h-4 w-4 text-indigo-600" />
                –£—Å–ª–æ–≤–∏—è
              </TabsTrigger>
              <TabsTrigger 
                value="antifraud" 
                className="flex items-center gap-2 data-[state=active]:bg-red-100 dark:data-[state=active]:bg-red-900 data-[state=active]:text-red-700 dark:data-[state=active]:text-red-300 hover:bg-red-50 dark:hover:bg-red-950"
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞"
              >
                <Image className="h-4 w-4 text-red-600" />
                –ê–Ω—Ç–∏—Ñ—Ä–æ–¥
              </TabsTrigger>
            </TabsList>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <TabsContent value="basic" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ *</Label>
                      <Input
                        id="name"
                        value={formData.name}
                        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞"
                        data-testid="input-offer-name"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</Label>
                      <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>
                        <SelectTrigger data-testid="select-category">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                        </SelectTrigger>
                        <SelectContent>
                          {categories.map(cat => (
                            <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>



                  <div>
                    <Label>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞</Label>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                      <div>
                        <Label htmlFor="description-ru" className="text-sm text-muted-foreground">–ù–∞ —Ä—É—Å—Å–∫–æ–º</Label>
                        <Textarea
                          id="description-ru"
                          value={formData.description.ru}
                          onChange={(e) => setFormData(prev => ({ 
                            ...prev, 
                            description: { ...prev.description, ru: e.target.value }
                          }))}
                          placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
                          rows={4}
                          data-testid="textarea-description-ru"
                        />
                      </div>
                      <div>
                        <Label htmlFor="description-en" className="text-sm text-muted-foreground">–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º</Label>
                        <Textarea
                          id="description-en"
                          value={formData.description.en}
                          onChange={(e) => setFormData(prev => ({ 
                            ...prev, 
                            description: { ...prev.description, en: e.target.value }
                          }))}
                          placeholder="Detailed offer description in English"
                          rows={4}
                          data-testid="textarea-description-en"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="logo">–õ–æ–≥–æ—Ç–∏–ø –æ—Ñ—Ñ–µ—Ä–∞</Label>
                      <div className="mt-2">
                        <Input
                          type="file"
                          id="logo"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                              const url = URL.createObjectURL(file);
                              setFormData(prev => ({ ...prev, logo: url }));
                            }
                          }}
                          className="mb-2"
                          data-testid="input-logo-file"
                        />
                        {formData.logo && (
                          <div className="mt-2">
                            <img 
                              src={formData.logo} 
                              alt="–õ–æ–≥–æ—Ç–∏–ø –æ—Ñ—Ñ–µ—Ä–∞" 
                              className="w-16 h-16 object-cover rounded-md border"
                            />
                          </div>
                        )}
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="kpi">KPI / –¶–µ–ª—å</Label>
                      <Input
                        id="kpi"
                        value={formData.kpi}
                        onChange={(e) => setFormData(prev => ({ ...prev, kpi: e.target.value }))}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: FTD, Registration, Sale"
                        data-testid="input-kpi"
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="payoutType">–¢–∏–ø –≤—ã–ø–ª–∞—Ç—ã</Label>
                    <Select value={formData.payoutType} onValueChange={(value: 'cpa' | 'cpl' | 'cps' | 'revshare' | 'hybrid') => setFormData(prev => ({ ...prev, payoutType: value }))}>
                      <SelectTrigger data-testid="select-payout-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="cpa">CPA - Cost Per Action</SelectItem>
                        <SelectItem value="cpl">CPL - Cost Per Lead</SelectItem>
                        <SelectItem value="cps">CPS - Cost Per Sale</SelectItem>
                        <SelectItem value="revshare">Revenue Share</SelectItem>
                        <SelectItem value="hybrid">Hybrid</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label>–¢–µ–≥–∏</Label>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {formData.tags.map(tag => (
                        <Badge key={tag} variant="secondary" className="flex items-center gap-1">
                          {tag}
                          <button
                            type="button"
                            onClick={() => removeTag(tag)}
                            className="ml-1 text-xs hover:text-red-500"
                          >
                            √ó
                          </button>
                        </Badge>
                      ))}
                    </div>
                    <div className="flex gap-2 mt-2">
                      <Input
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
                        onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                      />
                      <Button type="button" onClick={addTag} variant="outline">
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* –ì–µ–æ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ */}
            <TabsContent value="targeting" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</Label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                      {deviceTypes.map(device => (
                        <div key={device.value} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={`device-${device.value}`}
                            checked={formData.allowedDevices.includes(device.value)}
                            onChange={() => toggleDevice(device.value)}
                            className="rounded"
                          />
                          <Label htmlFor={`device-${device.value}`} className="text-sm">{device.label}</Label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator />

                  <div>
                    <Label>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</Label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                      {osTypes.map(os => (
                        <div key={os.value} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={`os-${os.value}`}
                            checked={formData.allowedOs.includes(os.value)}
                            onChange={() => toggleOs(os.value)}
                            className="rounded"
                          />
                          <Label htmlFor={`os-${os.value}`} className="text-sm">{os.label}</Label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator />

                  <div>
                    <Label>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</Label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mt-2">
                      {allowedTrafficSources.map(source => (
                        <div key={source} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={`traffic-${source}`}
                            checked={formData.trafficSources?.includes(source) || false}
                            onChange={() => {
                              const currentSources = formData.trafficSources || [];
                              const newSources = currentSources.includes(source)
                                ? currentSources.filter(s => s !== source)
                                : [...currentSources, source];
                              setFormData(prev => ({ ...prev, trafficSources: newSources }));
                            }}
                            className="rounded"
                          />
                          <Label htmlFor={`traffic-${source}`} className="text-sm">{source}</Label>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>



            {/* –°—Å—ã–ª–∫–∏ */}
            <TabsContent value="links" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–°—Å—ã–ª–∫–∏ –∏ –¥–æ–º–µ–Ω—ã</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="targetUrl">–¶–µ–ª–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ *</Label>
                      <div className="grid grid-cols-12 gap-2 text-xs font-medium text-muted-foreground px-4 mb-2 mt-3">
                        <div className="col-span-2">–ù–∞–∑–≤–∞–Ω–∏–µ</div>
                        <div className="col-span-4">URL —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
                        <div className="col-span-2">–†–∞–∑–Ω—ã–µ –ì–ï–û –¥–ª—è URL</div>
                        <div className="col-span-2">–†–∞–∑–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è URL</div>
                        <div className="col-span-1">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</div>
                        <div className="col-span-1">–£–¥–∞–ª–∏—Ç—å</div>
                      </div>
                      <div className="space-y-2">
                        {formData.landingPages.map((landing, index) => (
                          <div key={landing.id} className="grid grid-cols-12 gap-2 items-center p-3 border rounded-lg">
                            <div className="col-span-2">
                              <Input
                                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                                value={landing.name}
                                onChange={(e) => updateLandingPage(landing.id, 'name', e.target.value)}
                                className="w-full text-sm"
                              />
                            </div>
                            <div className="col-span-4">
                              <Input
                                placeholder="URL —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                                value={landing.url}
                                onChange={(e) => {
                                  updateLandingPage(landing.id, 'url', e.target.value);
                                  if (landing.isDefault) {
                                    setFormData(prev => ({ ...prev, targetUrl: e.target.value }));
                                  }
                                }}
                                className="w-full text-sm"
                              />
                            </div>
                            <div className="col-span-2">
                              <div className="flex items-center space-x-1">
                                <input
                                  type="checkbox"
                                  checked={formData.hasGlobalGeoSetting || false}
                                  onChange={(e) => setFormData(prev => ({ 
                                    ...prev, 
                                    hasGlobalGeoSetting: e.target.checked,
                                    landingPages: prev.landingPages.map(lp => ({
                                      ...lp,
                                      hasCustomGeo: e.target.checked
                                    }))
                                  }))}
                                  className="rounded flex-shrink-0"
                                  title="–†–∞–∑–Ω—ã–µ –ì–ï–û –¥–ª—è URL"
                                />
                                <Input
                                  placeholder="–ì–ï–û"
                                  value={formData.hasGlobalGeoSetting ? (landing.geo || '') : formData.globalGeo || ''}
                                  onChange={(e) => {
                                    if (formData.hasGlobalGeoSetting) {
                                      updateLandingPage(landing.id, 'geo', e.target.value);
                                    } else {
                                      setFormData(prev => ({ 
                                        ...prev, 
                                        globalGeo: e.target.value,
                                        landingPages: prev.landingPages.map(lp => ({
                                          ...lp,
                                          geo: e.target.value
                                        }))
                                      }));
                                    }
                                  }}
                                  className="w-full text-sm"
                                />
                              </div>
                            </div>
                            <div className="col-span-2">
                              <div className="flex items-center space-x-1">
                                <input
                                  type="checkbox"
                                  checked={formData.hasGlobalPayoutSetting || false}
                                  onChange={(e) => setFormData(prev => ({ 
                                    ...prev, 
                                    hasGlobalPayoutSetting: e.target.checked,
                                    landingPages: prev.landingPages.map(lp => ({
                                      ...lp,
                                      hasCustomPayout: e.target.checked
                                    }))
                                  }))}
                                  className="rounded flex-shrink-0"
                                  title="–†–∞–∑–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è URL"
                                />
                                <Input
                                  placeholder="–°—É–º–º–∞"
                                  value={formData.hasGlobalPayoutSetting ? (landing.payout || '') : formData.globalPayout || ''}
                                  onChange={(e) => {
                                    if (formData.hasGlobalPayoutSetting) {
                                      updateLandingPage(landing.id, 'payout', e.target.value);
                                    } else {
                                      setFormData(prev => ({ 
                                        ...prev, 
                                        globalPayout: e.target.value,
                                        landingPages: prev.landingPages.map(lp => ({
                                          ...lp,
                                          payout: e.target.value
                                        }))
                                      }));
                                    }
                                  }}
                                  className="w-full text-sm"
                                />
                              </div>
                            </div>
                            <div className="col-span-1 flex justify-center">
                              <input
                                type="checkbox"
                                checked={landing.isDefault}
                                onChange={(e) => updateLandingPage(landing.id, 'isDefault', e.target.checked)}
                                className="rounded"
                                title="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                              />
                            </div>
                            <div className="col-span-1 flex justify-center">
                              {formData.landingPages.length > 1 && (
                                <Button 
                                  type="button" 
                                  variant="outline" 
                                  size="sm" 
                                  onClick={() => removeLandingPage(landing.id)}
                                  title="–£–¥–∞–ª–∏—Ç—å –ª–µ–Ω–¥–∏–Ω–≥"
                                  className="h-8 w-8 p-0"
                                >
                                  <Trash2 className="h-3 w-3" />
                                </Button>
                              )}
                            </div>
                          </div>
                        ))}
                        <Button type="button" onClick={addLandingPage} variant="outline">
                          <Plus className="h-4 w-4 mr-2" />
                          –î–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω–¥–∏–Ω–≥
                        </Button>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">
                        –¶–µ–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                      </p>
                    </div>





                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="dailyLimit">–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç</Label>
                        <Input
                          id="dailyLimit"
                          type="number"
                          value={formData.dailyLimit}
                          onChange={(e) => setFormData(prev => ({ ...prev, dailyLimit: Number(e.target.value) }))}
                          placeholder="0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                          data-testid="input-daily-limit"
                        />
                      </div>

                      <div>
                        <Label htmlFor="monthlyLimit">–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç</Label>
                        <Input
                          id="monthlyLimit"
                          type="number"
                          value={formData.monthlyLimit}
                          onChange={(e) => setFormData(prev => ({ ...prev, monthlyLimit: Number(e.target.value) }))}
                          placeholder="0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                          data-testid="input-monthly-limit"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="postbackUrl">Postback URL</Label>
                      <Input
                        id="postbackUrl"
                        value={formData.postbackUrl}
                        onChange={(e) => setFormData(prev => ({ ...prev, postbackUrl: e.target.value }))}
                        placeholder="https://example.com/postback"
                        data-testid="input-postback-url"
                      />
                      <p className="text-sm text-muted-foreground mt-1">
                        URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö
                      </p>
                    </div>
                  </div>

                  <Separator />

                  <div>
                    <div className="flex items-center space-x-2 mb-4">
                      <input
                        type="checkbox"
                        id="allowCustomDomains"
                        checked={formData.allowCustomDomains}
                        onChange={(e) => setFormData(prev => ({ ...prev, allowCustomDomains: e.target.checked }))}
                        className="rounded"
                      />
                      <Label htmlFor="allowCustomDomains">–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤</Label>
                    </div>

                    {formData.allowCustomDomains && (
                      <div>
                        <Label>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã</Label>
                        <div className="space-y-2 mt-2">
                          {formData.customDomains.map((domain, index) => (
                            <div key={index} className="flex items-center gap-2">
                              <Input value={domain} readOnly className="flex-1" />
                              <Button 
                                type="button" 
                                variant="outline" 
                                size="sm"
                                onClick={() => removeCustomDomain(domain)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                          <Button type="button" onClick={addCustomDomain} variant="outline">
                            <Plus className="h-4 w-4 mr-2" />
                            –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>


                </CardContent>
              </Card>
            </TabsContent>

            {/* –£—Å–ª–æ–≤–∏—è */}
            <TabsContent value="conditions" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="partnerApprovalType">–¢–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</Label>
                      <Select value={formData.partnerApprovalType} onValueChange={(value: 'auto' | 'manual' | 'invite_only') => setFormData(prev => ({ ...prev, partnerApprovalType: value }))}>
                        <SelectTrigger data-testid="select-partner-approval">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="auto">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</SelectItem>
                          <SelectItem value="manual">–†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</SelectItem>
                          <SelectItem value="invite_only">–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex items-center space-x-2 pt-6">
                      <input
                        type="checkbox"
                        id="kycRequired"
                        checked={formData.kycRequired}
                        onChange={(e) => setFormData(prev => ({ ...prev, kycRequired: e.target.checked }))}
                        className="rounded"
                      />
                      <Label htmlFor="kycRequired">–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è KYC</Label>
                    </div>
                  </div>

                  <div>
                    <Label>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</Label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                      {allowedTrafficSources.map(source => (
                        <div key={source} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={`allowed-${source}`}
                            checked={formData.trafficSources.includes(source)}
                            onChange={() => toggleTrafficSource(source)}
                            className="rounded"
                          />
                          <Label htmlFor={`allowed-${source}`} className="text-sm">{source}</Label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</Label>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                      {deniedTrafficSources.map(source => (
                        <div key={source} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id={`denied-${source}`}
                            checked={formData.deniedSources.includes(source)}
                            onChange={() => toggleDeniedSource(source)}
                            className="rounded"
                          />
                          <Label htmlFor={`denied-${source}`} className="text-sm">{source}</Label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="trafficRequirements">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç—Ä–∞—Ñ–∏–∫—É</Label>
                    <Textarea
                      id="trafficRequirements"
                      value={formData.trafficRequirements}
                      onChange={(e) => setFormData(prev => ({ ...prev, trafficRequirements: e.target.value }))}
                      placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É —Ç—Ä–∞—Ñ–∏–∫–∞"
                      rows={4}
                      data-testid="textarea-traffic-requirements"
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* –ê–Ω—Ç–∏—Ñ—Ä–æ–¥ */}
            <TabsContent value="antifraud" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–ê–Ω—Ç–∏—Ñ—Ä–æ–¥ –∑–∞—â–∏—Ç–∞</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="antifraudEnabled"
                      checked={formData.antifraudEnabled}
                      onChange={(e) => setFormData(prev => ({ ...prev, antifraudEnabled: e.target.checked }))}
                      className="rounded"
                    />
                    <Label htmlFor="antifraudEnabled" className="font-medium">–í–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ –∑–∞—â–∏—Ç—É</Label>
                  </div>

                  {formData.antifraudEnabled && (
                    <div>
                      <Label>–ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</Label>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                        {antifraudMethods.map(method => (
                          <div key={method.value} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              id={`antifraud-${method.value}`}
                              checked={formData.antifraudMethods.includes(method.value)}
                              onChange={() => toggleAntifraudMethod(method.value)}
                              className="rounded"
                            />
                            <Label htmlFor={`antifraud-${method.value}`} className="text-sm">{method.label}</Label>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="pt-4 border-t">
                    <Label htmlFor="status">–°—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞</Label>
                    <Select value={formData.status} onValueChange={(value: 'draft' | 'active' | 'paused') => setFormData(prev => ({ ...prev, status: value }))}>
                      <SelectTrigger data-testid="select-status">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</SelectItem>
                        <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</SelectItem>
                        <SelectItem value="paused">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>


          </Tabs>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex justify-between items-center pt-6 border-t">
            <Button 
              type="button" 
              variant="outline"
              onClick={() => setFormData(initialFormData)}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
            
            <div className="flex gap-3">
              <Button 
                type="button" 
                variant="outline"
                onClick={() => {
                  setFormData(prev => ({ ...prev, status: 'draft' }));
                  handleSubmit(new Event('submit') as any);
                }}
                disabled={createOfferMutation.isPending}
              >
                <Save className="h-4 w-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
              </Button>
              
              <Button 
                type="button"
                onClick={() => {
                  setFormData(prev => ({ ...prev, status: 'active' }));
                  handleSubmit(new Event('submit') as any);
                }}
                disabled={createOfferMutation.isPending}
              >
                {createOfferMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ñ—Ñ–µ—Ä'}
              </Button>
            </div>
          </div>
        </form>
      </div>
    </RoleBasedLayout>
  );
}