import { useState, useEffect } from 'react';
import { Save, Bell, Shield, Eye, EyeOff, Key, Globe, Trash2 } from 'lucide-react';
import { Button } from '../../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Switch } from '../../components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';
import { useAuth } from '../../contexts/auth-context';
import { useTranslation } from 'react-i18next';
import { useTheme } from '../contexts/ThemeContext';
import { useToast } from '../../hooks/use-toast';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '../../lib/queryClient';

export default function PartnerSettings() {
  const { user } = useAuth();
  const { t, i18n } = useTranslation();
  const language = i18n.language;
  const setLanguage = (lang: string) => i18n.changeLanguage(lang);
  const { theme, setTheme } = useTheme();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const { data: profileData, isLoading: isProfileLoading } = useQuery({
    queryKey: ['/api/partner/profile'],
    queryFn: async () => await apiRequest('/api/partner/profile', 'GET')
  });

  const [notifications, setNotifications] = useState({
    emailOffers: true,
    emailPayments: true,
    emailNews: false,
    pushOffers: true,
    pushPayments: true,
    pushNews: false,
  });

  const [security, setSecurity] = useState({
    twoFactorEnabled: false,
    loginNotifications: true,
    sessionTimeout: '24',
    ipRestrictions: '',
  });

  const [passwords, setPasswords] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (profileData) {
      setSecurity(prev => ({
        ...prev,
        twoFactorEnabled: profileData.twoFactorEnabled || false,
        sessionTimeout: profileData.sessionTimeout || '24',
        ipRestrictions: profileData.ipRestrictions || '',
      }));
    }
  }, [profileData]);

  const handleNotificationChange = (key: string, value: boolean) => {
    setNotifications(prev => ({ ...prev, [key]: value }));
  };

  const handleSecurityChange = (key: string, value: string | boolean) => {
    setSecurity(prev => ({ ...prev, [key]: value }));
  };

  const handlePasswordChange = (key: string, value: string) => {
    setPasswords(prev => ({ ...prev, [key]: value }));
  };

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updatePreferencesMutation = useMutation({
    mutationFn: async (data: any) => {
      return apiRequest('/api/partner/profile', 'PATCH', data);
    },
    onSuccess: () => {
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        variant: "default",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/partner/profile'] });
      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        variant: "destructive",
      });
    }
  });

  const handleSaveSettings = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ —Ç–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const settingsData = {
      language,
      timezone: profileData?.timezone || 'Europe/Moscow',
    };
    updatePreferencesMutation.mutate(settingsData);
  };

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const changePasswordMutation = useMutation({
    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {
      return apiRequest('/api/partner/profile/change-password', 'POST', data);
    },
    onSuccess: () => {
      toast({
        title: "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω",
        description: "–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.",
        variant: "default",
      });
      setPasswords({ currentPassword: '', newPassword: '', confirmPassword: '' });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è",
        description: error.message || "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
        variant: "destructive",
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 
  const updateSecurityMutation = useMutation({
    mutationFn: async (data: any) => {
      return apiRequest('/api/partner/profile', 'PATCH', data);
    },
    onSuccess: () => {
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        variant: "default",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/partner/profile'] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        variant: "destructive",
      });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const updateNotificationsMutation = useMutation({
    mutationFn: async (data: any) => {
      return apiRequest('/api/partner/profile', 'PATCH', { settings: data });
    },
    onSuccess: () => {
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        variant: "default",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/partner/profile'] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        variant: "destructive",
      });
    }
  });

  const handlePasswordUpdate = () => {
    if (!passwords.currentPassword || !passwords.newPassword) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.",
        variant: "destructive",
      });
      return;
    }

    if (passwords.newPassword.length < 6) {
      toast({
        title: "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å",
        description: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.",
        variant: "destructive",
      });
      return;
    }

    if (passwords.newPassword !== passwords.confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.",
        variant: "destructive",
      });
      return;
    }

    changePasswordMutation.mutate({
      currentPassword: passwords.currentPassword,
      newPassword: passwords.newPassword
    });
  };

  const handleSaveSecuritySettings = () => {
    updateSecurityMutation.mutate({
      twoFactorEnabled: security.twoFactorEnabled,
      sessionTimeout: security.sessionTimeout,
      ipRestrictions: security.ipRestrictions
    });
  };

  const handleSaveNotifications = () => {
    updateNotificationsMutation.mutate(notifications);
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">{t('settings.title')}</h1>
            <p className="text-muted-foreground mt-1">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
            </p>
          </div>
        </div>

        <Tabs defaultValue="general" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="general">–û–±—â–∏–µ</TabsTrigger>
            <TabsTrigger value="notifications">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</TabsTrigger>
            <TabsTrigger value="security">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</TabsTrigger>
            <TabsTrigger value="account">–ê–∫–∫–∞—É–Ω—Ç</TabsTrigger>
          </TabsList>

          {/* General Settings */}
          <TabsContent value="general" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="language">–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</Label>
                    <Select value={language} onValueChange={setLanguage}>
                      <SelectTrigger data-testid="select-language">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</SelectItem>
                        <SelectItem value="en">üá∫üá∏ English</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="theme">–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</Label>
                    <Select value={theme} onValueChange={setTheme}>
                      <SelectTrigger data-testid="select-theme">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="light">–°–≤–µ—Ç–ª–∞—è</SelectItem>
                        <SelectItem value="dark">–¢—ë–º–Ω–∞—è</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <Button 
                  onClick={handleSaveSettings} 
                  disabled={updatePreferencesMutation.isPending}
                  data-testid="button-save-general"
                  title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                >
                  <Save className="h-4 w-4 mr-2" />
                  {updatePreferencesMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications */}
          <TabsContent value="notifications" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="h-5 w-5" />
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ Email
                </CardTitle>
                <CardDescription>
                  –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="emailOffers">–ù–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã</Label>
                    <p className="text-sm text-muted-foreground">
                      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö
                    </p>
                  </div>
                  <Switch
                    id="emailOffers"
                    checked={notifications.emailOffers}
                    onCheckedChange={(value) => handleNotificationChange('emailOffers', value)}
                    data-testid="switch-email-offers"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="emailPayments">–í—ã–ø–ª–∞—Ç—ã</Label>
                    <p className="text-sm text-muted-foreground">
                      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
                    </p>
                  </div>
                  <Switch
                    id="emailPayments"
                    checked={notifications.emailPayments}
                    onCheckedChange={(value) => handleNotificationChange('emailPayments', value)}
                    data-testid="switch-email-payments"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="emailNews">–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</Label>
                    <p className="text-sm text-muted-foreground">
                      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                    </p>
                  </div>
                  <Switch
                    id="emailNews"
                    checked={notifications.emailNews}
                    onCheckedChange={(value) => handleNotificationChange('emailNews', value)}
                    data-testid="switch-email-news"
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="pushOffers">–ù–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã</Label>
                    <p className="text-sm text-muted-foreground">
                      –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö
                    </p>
                  </div>
                  <Switch
                    id="pushOffers"
                    checked={notifications.pushOffers}
                    onCheckedChange={(value) => handleNotificationChange('pushOffers', value)}
                    data-testid="switch-push-offers"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="pushPayments">–í—ã–ø–ª–∞—Ç—ã</Label>
                    <p className="text-sm text-muted-foreground">
                      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–ª–∞—Ç
                    </p>
                  </div>
                  <Switch
                    id="pushPayments"
                    checked={notifications.pushPayments}
                    onCheckedChange={(value) => handleNotificationChange('pushPayments', value)}
                    data-testid="switch-push-payments"
                  />
                </div>
                <Button 
                  onClick={handleSaveNotifications} 
                  disabled={updateNotificationsMutation.isPending}
                  data-testid="button-save-notifications"
                  title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                >
                  <Save className="h-4 w-4 mr-2" />
                  {updateNotificationsMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security */}
          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="twoFactor">–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</Label>
                    <p className="text-sm text-muted-foreground">
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    </p>
                  </div>
                  <Switch
                    id="twoFactor"
                    checked={security.twoFactorEnabled}
                    onCheckedChange={(value) => handleSecurityChange('twoFactorEnabled', value)}
                    data-testid="switch-two-factor"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="loginNotifications">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ</Label>
                    <p className="text-sm text-muted-foreground">
                      –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–∞—Ö –≤ –∞–∫–∫–∞—É–Ω—Ç
                    </p>
                  </div>
                  <Switch
                    id="loginNotifications"
                    checked={security.loginNotifications}
                    onCheckedChange={(value) => handleSecurityChange('loginNotifications', value)}
                    data-testid="switch-login-notifications"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="sessionTimeout">–¢–∞–π–º-–∞—É—Ç —Å–µ—Å—Å–∏–∏ (—á–∞—Å—ã)</Label>
                  <Select 
                    value={security.sessionTimeout} 
                    onValueChange={(value) => handleSecurityChange('sessionTimeout', value)}
                  >
                    <SelectTrigger data-testid="select-session-timeout">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">1 —á–∞—Å</SelectItem>
                      <SelectItem value="8">8 —á–∞—Å–æ–≤</SelectItem>
                      <SelectItem value="24">24 —á–∞—Å–∞</SelectItem>
                      <SelectItem value="168">7 –¥–Ω–µ–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</CardTitle>
                <CardDescription>
                  –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</Label>
                  <div className="relative">
                    <Input
                      id="currentPassword"
                      type={showCurrentPassword ? 'text' : 'password'}
                      value={passwords.currentPassword}
                      onChange={(e) => handlePasswordChange('currentPassword', e.target.value)}
                      data-testid="input-current-password"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                    >
                      {showCurrentPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
                  <div className="relative">
                    <Input
                      id="newPassword"
                      type={showNewPassword ? 'text' : 'password'}
                      value={passwords.newPassword}
                      onChange={(e) => handlePasswordChange('newPassword', e.target.value)}
                      data-testid="input-new-password"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowNewPassword(!showNewPassword)}
                    >
                      {showNewPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
                  <Input
                    id="confirmPassword"
                    type="password"
                    value={passwords.confirmPassword}
                    onChange={(e) => handlePasswordChange('confirmPassword', e.target.value)}
                    data-testid="input-confirm-password"
                  />
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={handlePasswordUpdate} 
                    disabled={changePasswordMutation.isPending}
                    data-testid="button-update-password"
                    title="–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"
                  >
                    <Key className="h-4 w-4 mr-2" />
                    {changePasswordMutation.isPending ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
                  </Button>
                  <Button 
                    onClick={handleSaveSecuritySettings} 
                    disabled={updateSecurityMutation.isPending}
                    variant="outline"
                    data-testid="button-save-security"
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                  >
                    <Shield className="h-4 w-4 mr-2" />
                    {updateSecurityMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Account */}
          <TabsContent value="account" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º</CardTitle>
                <CardDescription>
                  –û–ø—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="rounded-lg border border-destructive/20 bg-destructive/5 p-4">
                  <div className="flex items-start space-x-3">
                    <Trash2 className="h-5 w-5 text-destructive mt-0.5" />
                    <div className="space-y-2">
                      <h3 className="font-semibold text-destructive">–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                      <p className="text-sm text-muted-foreground">
                        –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –ø–æ—Ç–µ—Ä–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, 
                        —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                      </p>
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        data-testid="button-delete-account"
                        title="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ"
                        onClick={() => {
                          toast({
                            title: "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                            description: "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                            variant: "default",
                          });
                        }}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}