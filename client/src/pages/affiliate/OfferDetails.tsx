import { useState, useEffect } from "react";
import { useParams } from "wouter";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Copy, Globe, MapPin, DollarSign, Target, Calendar, Building2, ExternalLink, ArrowLeft, Lock, FileText, Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";

interface OfferDetails {
  id: string;
  name: string;
  description: string;
  logo: string;
  category: string;
  payout: string;
  payoutType: string;
  currency: string;
  status: string;
  countries: string[];
  creatives?: string;
  creativesUrl?: string;
  landingPages: Array<{
    id: string;
    name: string;
    url: string;
    type: string;
    isDefault: boolean;
  }>;
  kpiConditions: {
    minDeposit?: number;
    minAge?: number;
    countries?: string[];
    allowedTrafficTypes?: string[];
  };
  restrictions: {
    forbidden_sources?: string[];
    allowed_sources?: string[];
    geo_restrictions?: string[];
  };
  trackingLink: string;
  createdAt: string;
  advertiserInfo: {
    name: string;
    company: string;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–¥–∞–º
function getCountryName(code: string): string {
  const countries: Record<string, string> = {
    'RU': '–†–æ—Å—Å–∏—è', 'US': '–°–®–ê', 'DE': '–ì–µ—Ä–º–∞–Ω–∏—è', 'FR': '–§—Ä–∞–Ω—Ü–∏—è', 'IT': '–ò—Ç–∞–ª–∏—è',
    'ES': '–ò—Å–ø–∞–Ω–∏—è', 'UK': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'CA': '–ö–∞–Ω–∞–¥–∞', 'AU': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'BR': '–ë—Ä–∞–∑–∏–ª–∏—è', 'MX': '–ú–µ–∫—Å–∏–∫–∞', 'IN': '–ò–Ω–¥–∏—è', 'JP': '–Ø–ø–æ–Ω–∏—è', 'KR': '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
    'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'BY': '–ë–µ–ª–∞—Ä—É—Å—å', 'UA': '–£–∫—Ä–∞–∏–Ω–∞', 'PL': '–ü–æ–ª—å—à–∞', 'TR': '–¢—É—Ä—Ü–∏—è'
  };
  return countries[code] || code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
function getCountryFlag(code: string): string {
  const flags: Record<string, string> = {
    'RU': 'üá∑üá∫', 'US': 'üá∫üá∏', 'DE': 'üá©üá™', 'FR': 'üá´üá∑', 'IT': 'üáÆüáπ',
    'ES': 'üá™üá∏', 'UK': 'üá¨üáß', 'CA': 'üá®üá¶', 'AU': 'üá¶üá∫', 'BR': 'üáßüá∑',
    'MX': 'üá≤üáΩ', 'IN': 'üáÆüá≥', 'JP': 'üáØüáµ', 'KR': 'üá∞üá∑', 'KZ': 'üá∞üáø',
    'BY': 'üáßüáæ', 'UA': 'üá∫üá¶', 'PL': 'üáµüá±', 'TR': 'üáπüá∑'
  };
  return flags[code] || 'üåç';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –±–µ–π–¥–∂–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryBadgeProps(category: string) {
  const categories: Record<string, { label: string; className: string }> = {
    gambling: { label: "–ì–µ–º–±–ª–∏–Ω–≥", className: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300" },
    dating: { label: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", className: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300" },
    finance: { label: "–§–∏–Ω–∞–Ω—Å—ã", className: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300" },
    crypto: { label: "–ö—Ä–∏–ø—Ç–æ", className: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300" },
    nutra: { label: "–ù—É—Ç—Ä–∞", className: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" },
    software: { label: "–ü–û", className: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300" },
  };
  
  return categories[category] || { label: category, className: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300" };
}

export default function OfferDetails() {
  const params = useParams();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const offerId = params.id;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞
  const { data: offer, isLoading: offerLoading, error: offerError } = useQuery({
    queryKey: ["/api/partner/offers", offerId],
    enabled: !!offerId,
    staleTime: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
  const { data: accessRequests = [] } = useQuery({
    queryKey: ["/api/partner/access-requests"],
    staleTime: 2 * 60 * 1000,
  });

  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
  const currentRequest = accessRequests.find((req: any) => 
    req.offerId === offerId || req.offer_id === offerId
  );
  const requestStatus = currentRequest?.status || 'none';
  const isApproved = requestStatus === 'approved';

  // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞  
  console.log('OfferDetails Debug:', {
    offerId,
    accessRequests: accessRequests.length,
    rawFirstRequest: accessRequests[0],
    allRequests: accessRequests.map((req: any) => ({ 
      id: req.id, 
      offerId: req.offerId || req.offer_id, 
      status: req.status,
      offer: req.offer?.id 
    })),
    currentRequest,
    requestStatus,
    isApproved
  });

  const handleRequestAccess = async () => {
    if (offerId && requestStatus === 'none') {
      try {
        const response = await fetch("/api/partner/offer-access-request", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${localStorage.getItem("auth_token")}`
          },
          body: JSON.stringify({
            offerId,
            message: "–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É"
          })
        });

        if (response.ok) {
          toast({
            title: "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            description: "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é",
          });
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∑–∞–ø—Ä–æ—Å–æ–≤
          window.location.reload();
        } else {
          throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
        }
      } catch (error) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          variant: "destructive"
        });
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (offerLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => navigate("/affiliate/offers")}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            –ù–∞–∑–∞–¥ –∫ –æ—Ñ—Ñ–µ—Ä–∞–º
          </Button>
          <h1 className="text-2xl font-bold">–ó–∞–≥—Ä—É–∑–∫–∞...</h1>
        </div>
        <div className="text-center p-8">
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞...</p>
        </div>
      </div>
    );
  }

  if (offerError || !offer) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => navigate("/affiliate/offers")}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            –ù–∞–∑–∞–¥ –∫ –æ—Ñ—Ñ–µ—Ä–∞–º
          </Button>
          <h1 className="text-2xl font-bold">–û—à–∏–±–∫–∞</h1>
        </div>
        <div className="text-center p-8">
          <p>–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ</p>
        </div>
      </div>
    );
  }

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: `${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`,
    });
  };

  const downloadCreatives = async (creativesUrl: string) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
      const token = localStorage.getItem('auth_token');
      console.log('Download request - token available:', !!token);
      console.log('Making request to:', `/api/partner/offers/${offerId}/creatives/download`);
      
      if (!token) {
        toast({
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ",
          variant: "destructive",
        });
        return;
      }

      const response = await fetch(`/api/partner/offers/${offerId}/creatives/download`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        if (response.status === 403) {
          toast({
            title: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
            description: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–µ–∞—Ç–∏–≤–∞–º —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞",
            variant: "destructive",
          });
          return;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º blob –∏ —Å–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `creatives-${offerId}.zip`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "–ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω",
        description: "ZIP-–∞—Ä—Ö–∏–≤ —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
      });
    } catch (error) {
      console.error('Download error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã",
        variant: "destructive",
      });
    }
  };

  const categoryProps = getCategoryBadgeProps(offer?.category || 'other');
  
  // –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—ã –ê—Ä–º–µ–Ω–∏–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
  const countryNames: Record<string, string> = {
    'armenia': 'üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è',
    'RU': 'üá∑üá∫ –†–æ—Å—Å–∏—è', 'US': 'üá∫üá∏ –°–®–ê', 'DE': 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è', 'FR': 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è', 'IT': 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
    'ES': 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è', 'UK': 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'CA': 'üá®üá¶ –ö–∞–Ω–∞–¥–∞', 'AU': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
    'BR': 'üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è', 'MX': 'üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞', 'IN': 'üáÆüá≥ –ò–Ω–¥–∏—è', 'JP': 'üáØüáµ –Ø–ø–æ–Ω–∏—è', 'KR': 'üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
    'KZ': 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'BY': 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å', 'UA': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', 'PL': 'üáµüá± –ü–æ–ª—å—à–∞', 'TR': 'üáπüá∑ –¢—É—Ä—Ü–∏—è'
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge variant="outline" className="text-green-600 border-green-600">–ê–∫—Ç–∏–≤–µ–Ω</Badge>;
      case 'paused':
        return <Badge variant="outline" className="text-yellow-600 border-yellow-600">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</Badge>;
      case 'archived':
        return <Badge variant="outline" className="text-gray-600 border-gray-600">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</Badge>;
      default:
        return <Badge variant="outline" className="text-blue-600 border-blue-600">–ß–µ—Ä–Ω–æ–≤–∏–∫</Badge>;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (!offer) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => navigate("/affiliate/offers")}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            –ù–∞–∑–∞–¥ –∫ –æ—Ñ—Ñ–µ—Ä–∞–º
          </Button>
          <h1 className="text-2xl font-bold">–ó–∞–≥—Ä—É–∑–∫–∞...</h1>
        </div>
        <div className="flex items-center justify-center p-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ */}
      <div className="flex items-center gap-4">
        <Button 
          variant="ghost" 
          size="sm"
          onClick={() => navigate("/affiliate/offers")}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="w-4 h-4" />
          –ù–∞–∑–∞–¥ –∫ –æ—Ñ—Ñ–µ—Ä–∞–º
        </Button>
        <h1 className="text-2xl font-bold">–î–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞</h1>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ */}
      <Card>
        <CardHeader>
          <div className="flex items-start gap-4">
            <div className="w-16 h-16 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-xl">
              {offer?.name ? offer.name.substring(0, 2).toUpperCase() : 'OF'}
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <CardTitle className="text-xl">{offer?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</CardTitle>
                <Badge className={categoryProps.className}>
                  {categoryProps.label}
                </Badge>
                {getStatusBadge(offer?.status || 'draft')}
              </div>
              <p className="text-muted-foreground">
                {typeof offer?.description === 'object' 
                  ? (offer.description?.ru || offer.description?.en || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                  : (offer?.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                }
              </p>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="flex items-center gap-2 p-3 bg-green-50 rounded-lg dark:bg-green-900/20">
              <DollarSign className="w-5 h-5 text-green-600" />
              <div>
                <p className="font-semibold text-green-600">${offer?.payout || '0'} {offer?.currency || 'USD'}</p>
                <p className="text-sm text-muted-foreground">–í—ã–ø–ª–∞—Ç–∞ –∑–∞ {(offer?.payoutType || 'CPA').toUpperCase()}</p>
              </div>
            </div>
            <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-lg dark:bg-blue-900/20">
              <Globe className="w-5 h-5 text-blue-600" />
              <div>
                <p className="font-semibold text-blue-600">{offer?.countries?.length || 0} —Å—Ç—Ä–∞–Ω</p>
                <p className="text-sm text-muted-foreground">–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–æ</p>
              </div>
            </div>
            <div className="flex items-center gap-2 p-3 bg-purple-50 rounded-lg dark:bg-purple-900/20">
              <Building2 className="w-5 h-5 text-purple-600" />
              <div>
                <p className="font-semibold text-purple-600">
                  {offer?.advertiserId ? `ID ${offer.advertiserId.substring(0, 8)}...` : '–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å'}
                </p>
                <p className="text-sm text-muted-foreground">–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å</p>
              </div>
            </div>
            <div className="flex items-center gap-2 p-3 bg-orange-50 rounded-lg dark:bg-orange-900/20">
              <Calendar className="w-5 h-5 text-orange-600" />
              <div>
                <p className="font-semibold text-orange-600">
                  {offer?.createdAt ? new Date(offer.createdAt).toLocaleDateString('ru-RU') : ''}
                </p>
                <p className="text-sm text-muted-foreground">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –¢—Ä–µ–∫–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ */}
      {isApproved ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5" />
              –¢—Ä–µ–∫–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg dark:bg-gray-900/50">
              <code className="flex-1 text-sm font-mono">{offer.partnerLink || `https://track.platform.com/click/${offer.id}?partner=${currentRequest?.partnerId}&subid=YOUR_SUBID`}</code>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => copyToClipboard(offer.partnerLink || `https://track.platform.com/click/${offer.id}?partner=${currentRequest?.partnerId}&subid=YOUR_SUBID`, "–¢—Ä–µ–∫–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞")}
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
              >
                <Copy className="w-4 h-4" />
              </Button>
            </div>
            <p className="text-sm text-muted-foreground mt-2">
              –ó–∞–º–µ–Ω–∏—Ç–µ {"{{"}<code>subid</code>{"}"} –Ω–∞ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞
            </p>
          </CardContent>
        </Card>
      ) : null}

      {/* –ö—Ä–µ–∞—Ç–∏–≤—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö */}
      {isApproved && (offer.creatives || offer.creativesUrl) ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5" />
              –ö—Ä–µ–∞—Ç–∏–≤—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between p-4 border rounded-lg bg-gray-50 dark:bg-gray-900/50">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center">
                  <FileText className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                </div>
                <div>
                  <h4 className="font-medium">–ê—Ä—Ö–∏–≤ —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏</h4>
                  <p className="text-sm text-muted-foreground">ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏</p>
                </div>
              </div>
              <Button
                onClick={() => downloadCreatives(offer.creatives || offer.creativesUrl)}
                className="bg-green-600 hover:bg-green-700 text-white"
                title="–°–∫–∞—á–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã"
              >
                <Download className="w-4 h-4 mr-2" />
                –°–∫–∞—á–∞—Ç—å
              </Button>
            </div>
          </CardContent>
        </Card>
      ) : null}

      {/* –ì–µ–æ-—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MapPin className="w-5 h-5" />
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {(offer.countries || []).map((country: string) => (
              <div key={country} className="flex items-center gap-2 p-2 border rounded-lg">
                <span className="text-lg">{countryNames[country] ? countryNames[country].split(' ')[0] : getCountryFlag(country)}</span>
                <span className="font-medium">{countryNames[country] ? countryNames[country].split(' ')[1] : getCountryName(country)}</span>
                <Badge variant="secondary" className="ml-auto text-xs">
                  {country.toUpperCase()}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* –õ–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —É—Å–ª–æ–≤–Ω–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ */}
      {isApproved ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ExternalLink className="w-5 h-5" />
              –õ–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({(offer.landingPages || []).length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {(offer.landingPages || []).map((landing: any) => (
                <div key={landing.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium">{landing.name}</h4>
                      {landing.isDefault && (
                        <Badge variant="default" className="text-xs">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</Badge>
                      )}
                      <Badge variant="outline" className="text-xs">{landing.type}</Badge>
                    </div>
                    <code className="text-sm text-muted-foreground">{landing.url}</code>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => copyToClipboard(landing.url, "URL –ª–µ–Ω–¥–∏–Ω–≥–∞")}
                      title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL"
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => window.open(landing.url, '_blank')}
                      title="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
                    >
                      <ExternalLink className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lock className="w-5 h-5" />
              –î–æ—Å—Ç—É–ø –∫ –ª–µ–Ω–¥–∏–Ω–≥–∞–º
            </CardTitle>
          </CardHeader>
          <CardContent className="text-center space-y-4 py-12">
            <Lock className="h-16 w-16 text-muted-foreground mx-auto mb-6" />
            <div>
              <h3 className="text-lg font-medium mb-2">
                {requestStatus === 'pending' ? '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø'}
              </h3>
              <p className="text-muted-foreground">
                {requestStatus === 'pending' 
                  ? '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–µ–Ω–¥–∏–Ω–≥–∞–º –∏ —Å—Å—ã–ª–∫–∞–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–º'
                  : '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ª–µ–Ω–¥–∏–Ω–≥-—Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —É —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è'
                }
              </p>
            </div>
            {requestStatus === 'none' && (
              <Button 
                onClick={handleRequestAccess}
                className="bg-blue-600 hover:bg-blue-700 text-white px-8"
              >
                –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø
              </Button>
            )}
            {requestStatus === 'pending' && (
              <Button 
                variant="outline"
                className="border-yellow-500 text-yellow-600 hover:bg-yellow-50 px-8"
                disabled
              >
                –í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è
              </Button>
            )}
          </CardContent>
        </Card>
      )}

      {/* KPI —É—Å–ª–æ–≤–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>–£—Å–ª–æ–≤–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h4 className="font-medium mb-2">KPI —É—Å–ª–æ–≤–∏—è</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {offer?.kpiConditions?.minDeposit && (
                <div className="p-3 bg-green-50 rounded-lg dark:bg-green-900/20">
                  <p className="text-sm text-muted-foreground">–ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç</p>
                  <p className="font-semibold text-green-600">${offer.kpiConditions.minDeposit}</p>
                </div>
              )}
              {offer?.kpiConditions?.minAge && (
                <div className="p-3 bg-blue-50 rounded-lg dark:bg-blue-900/20">
                  <p className="text-sm text-muted-foreground">–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç</p>
                  <p className="font-semibold text-blue-600">{offer.kpiConditions.minAge}+</p>
                </div>
              )}
            </div>
          </div>

          <Separator />

          <div>
            <h4 className="font-medium mb-2">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</h4>
            <div className="flex flex-wrap gap-2">
              {offer?.kpiConditions?.allowedTrafficTypes?.map((type: string) => (
                <Badge key={type} variant="secondary">{type}</Badge>
              ))}
            </div>
          </div>

          <Separator />

          <div>
            <h4 className="font-medium mb-2">–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</h4>
            <div className="flex flex-wrap gap-2">
              {offer?.restrictions?.forbidden_sources?.map((source: string) => (
                <Badge key={source} variant="destructive">{source}</Badge>
              ))}
            </div>
          </div>

          <Separator />

          <div>
            <h4 className="font-medium mb-2">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏</h4>
            <div className="flex flex-wrap gap-2">
              {offer?.restrictions?.allowed_sources?.map((source: string) => (
                <Badge key={source} variant="outline" className="border-green-600 text-green-600">{source}</Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}