import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Upload, FileText, X, Check } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface CreativeUploaderProps {
  offerId?: string;
  maxNumberOfFiles?: number;
  maxFileSize?: number;
  onGetUploadParameters?: () => Promise<{ method: 'PUT'; url: string }>;
  onComplete?: (result: any) => void;
  uploaded?: boolean;
  buttonClassName?: string;
}

export function CreativeUploader({ 
  offerId, 
  maxNumberOfFiles = 1,
  maxFileSize = 50 * 1024 * 1024,
  onGetUploadParameters,
  onComplete,
  uploaded = false,
  buttonClassName 
}: CreativeUploaderProps) {
  const [uploading, setUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const { toast } = useToast();

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    console.log('üîç –§–∞–π–ª –≤—ã–±—Ä–∞–Ω:', file ? file.name : 'none');
    console.log('üîç –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', file ? file.size : 0);
    
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ZIP —Ñ–∞–π–ª
      if (!file.name.toLowerCase().endsWith('.zip')) {
        console.log('‚ùå –ù–µ ZIP —Ñ–∞–π–ª');
        toast({
          title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
          description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏",
          variant: "destructive",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (file.size > maxFileSize) {
        console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
        toast({
          title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
          description: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ${formatFileSize(maxFileSize)}`,
          variant: "destructive",
        });
        return;
      }

      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
      setSelectedFile(file);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      handleUpload();
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      console.log('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      return;
    }

    console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', selectedFile.name);
    setUploading(true);
    
    try {
      let uploadURL: string;
      
      if (onGetUploadParameters) {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ upload URL —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è URL (–¥–ª—è CreateOffer)
        const params = await onGetUploadParameters();
        uploadURL = params.url;
        console.log('‚úÖ Upload URL –ø–æ–ª—É—á–µ–Ω:', uploadURL.substring(0, 50) + '...');
      } else {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ upload URL —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ (–¥–ª—è OfferDetails)
        const token = localStorage.getItem('auth_token');
        console.log('üîë –¢–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', token ? '–¥–∞' : '–Ω–µ—Ç');
        
        const uploadResponse = await fetch('/api/objects/upload', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        console.log('Upload URL response status:', uploadResponse.status);
        
        if (!uploadResponse.ok) {
          const errorText = await uploadResponse.text();
          console.error('Upload URL error:', errorText);
          throw new Error(`Failed to get upload URL: ${uploadResponse.status}`);
        }

        const data = await uploadResponse.json();
        uploadURL = data.uploadURL;
      }

      console.log('Uploading file to:', uploadURL);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const fileUploadResponse = await fetch(uploadURL, {
        method: 'PUT',
        body: selectedFile,
        headers: {
          'Content-Type': 'application/zip',
        },
      });

      console.log('File upload response status:', fileUploadResponse.status);

      if (!fileUploadResponse.ok) {
        throw new Error(`Failed to upload file: ${fileUploadResponse.status}`);
      }

      toast({
        title: "–ö—Ä–µ–∞—Ç–∏–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        description: "ZIP –∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Uppy –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const result = {
        successful: [{
          uploadURL: uploadURL,
          name: selectedFile.name,
          size: selectedFile.size
        }],
        failed: []
      };

      // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      onComplete?.(result);
      
      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
      setSelectedFile(null);

    } catch (error) {
      console.error('Upload error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    } finally {
      setUploading(false);
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Upload className="w-5 h-5" />
          –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {!selectedFile ? (
          <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8">
            <div className="text-center">
              <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏
              </h4>
              <p className="text-sm text-muted-foreground mb-4">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {formatFileSize(maxFileSize)}
              </p>
              <input
                id="creative-upload"
                type="file"
                accept=".zip"
                onChange={handleFileSelect}
                className="hidden"
                data-testid="input-file-creative"
              />
              <Button 
                type="button" 
                onClick={() => document.getElementById('creative-upload')?.click()}
                className={`bg-blue-600 hover:bg-blue-700 text-white transition-colors ${buttonClassName || ''}`}
                data-testid="button-upload-creative"
                title="–í—ã–±—Ä–∞—Ç—å ZIP —Ñ–∞–π–ª —Å –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏"
              >
                <Upload className="w-4 h-4 mr-2" />
                –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 border rounded-lg bg-gray-50 dark:bg-gray-900/50">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center">
                  <FileText className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                </div>
                <div>
                  <h4 className="font-medium">{selectedFile.name}</h4>
                  <p className="text-sm text-muted-foreground">
                    {formatFileSize(selectedFile.size)}
                  </p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedFile(null)}
                disabled={uploading}
                title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <div className="flex gap-2">
              <Button
                onClick={handleUpload}
                disabled={uploading}
                className="bg-green-600 hover:bg-green-700 text-white flex-1"
              >
                {uploading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    –ó–∞–≥—Ä—É–∑–∫–∞...
                  </>
                ) : (
                  <>
                    <Check className="w-4 h-4 mr-2" />
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã
                  </>
                )}
              </Button>
              <Button
                variant="outline"
                onClick={() => setSelectedFile(null)}
                disabled={uploading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        )}

        <div className="text-xs text-muted-foreground">
          <p>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP –∞—Ä—Ö–∏–≤—ã</p>
          <p>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {formatFileSize(maxFileSize)}</p>
          <p>‚Ä¢ –ê—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –±–∞–Ω–Ω–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
        </div>
      </CardContent>
    </Card>
  );
}