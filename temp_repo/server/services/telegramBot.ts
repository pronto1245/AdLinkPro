import { storage } from "../storage";
import { notificationService } from "./notification";

interface TelegramMessage {
  chat_id: number;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  disable_web_page_preview?: boolean;
}

interface TelegramUser {
  id: number;
  first_name: string;
  username?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: TelegramUser;
    chat: {
      id: number;
      type: string;
    };
    text?: string;
    date: number;
  };
}

export class TelegramBotService {
  private token: string;
  private baseUrl: string;

  constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN || '';
    this.baseUrl = `https://api.telegram.org/bot${this.token}`;
    
    if (!this.token) {
      console.error('‚ö†Ô∏è TELEGRAM_BOT_TOKEN not provided');
    } else {
      console.log('‚úÖ Telegram Bot service initialized');
      this.setupWebhook();
    }
  }

  private async setupWebhook() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.getBotInfo();
      console.log('ü§ñ Bot Info:', botInfo);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      const webhookUrl = `${process.env.REPLIT_EXTERNAL_URL || 'https://setbet-arbit.ru'}/api/telegram/webhook`;
      await this.setWebhook(webhookUrl);
      console.log('üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    }
  }

  private async getBotInfo() {
    const response = await fetch(`${this.baseUrl}/getMe`);
    const data = await response.json();
    return data.result;
  }

  private async setWebhook(url: string) {
    const response = await fetch(`${this.baseUrl}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url })
    });
    return await response.json();
  }

  async sendMessage(chatId: number, message: string, parseMode: 'HTML' | 'Markdown' = 'HTML'): Promise<boolean> {
    try {
      const payload: TelegramMessage = {
        chat_id: chatId,
        text: message,
        parse_mode: parseMode,
        disable_web_page_preview: true
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId, messageLength: message.length });

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log('‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', result);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Telegram API –æ—à–∏–±–∫–∞:', error);
      return false;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  async notifyConversion(data: {
    userId: string;
    offerName: string;
    partnerName: string;
    amount: number;
    currency: string;
    country?: string;
    source?: string;
  }) {
    const user = await storage.getUserById(data.userId);
    if (!user?.telegramChatId) return;

    const message = `
üéâ <b>–ù–û–í–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø!</b>

üí∞ <b>–°—É–º–º–∞:</b> ${data.amount} ${data.currency}
üéØ <b>–û—Ñ—Ñ–µ—Ä:</b> ${data.offerName}
üë§ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> ${data.partnerName}
üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> ${data.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üì± <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${data.source || '–ù–µ —É–∫–∞–∑–∞–Ω'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    await this.sendMessage(user.telegramChatId, message);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ—Ä–æ–¥–µ
  async notifyFraud(data: {
    userId: string;
    type: string;
    description: string;
    severity: 'low' | 'medium' | 'high';
    ipAddress?: string;
    country?: string;
  }) {
    const user = await storage.getUserById(data.userId);
    if (!user?.telegramChatId) return;

    const severityEmoji = {
      low: 'üü°',
      medium: 'üü†', 
      high: 'üî¥'
    };

    const message = `
${severityEmoji[data.severity]} <b>FRAUD ALERT!</b>

‚ö†Ô∏è <b>–¢–∏–ø:</b> ${data.type}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${data.description}
üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${data.severity.toUpperCase()}
üåê <b>IP:</b> ${data.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> ${data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    await this.sendMessage(user.telegramChatId, message);
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  async sendDailyReport(userId: string) {
    const user = await storage.getUserById(userId);
    if (!user?.telegramChatId) return;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const stats = {
      conversions: 12,
      clicks: 1847,
      revenue: 2340.50,
      currency: 'USD',
      cr: 0.65,
      epc: 1.27
    };

    const message = `
üìä <b>–î–ù–ï–í–ù–û–ô –û–¢–ß–ï–¢</b>

üí∞ <b>–î–æ—Ö–æ–¥:</b> ${stats.revenue} ${stats.currency}
üéØ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> ${stats.conversions}
üëÜ <b>–ö–ª–∏–∫–∏:</b> ${stats.clicks}
üìà <b>CR:</b> ${stats.cr}%
üíµ <b>EPC:</b> $${stats.epc}

üìÖ <b>–î–∞—Ç–∞:</b> ${today.toLocaleDateString('ru-RU')}
    `;

    await this.sendMessage(user.telegramChatId, message);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleUpdate(update: TelegramUpdate) {
    if (!update.message?.text) return;

    const chatId = update.message.chat.id;
    const text = update.message.text;
    const userId = update.message.from.id;

    console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ:', { chatId, text, userId });

    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    switch (text) {
      case '/start':
        await this.handleStartCommand(chatId, update.message.from);
        break;
      
      case '/help':
        await this.handleHelpCommand(chatId);
        break;
        
      case '/stats':
        await this.handleStatsCommand(chatId, userId);
        break;
        
      case '/report':
        await this.handleReportCommand(chatId, userId);
        break;

      case '/settings':
        await this.handleSettingsCommand(chatId, userId);
        break;

      default:
        await this.handleUnknownCommand(chatId);
    }
  }

  private async handleStartCommand(chatId: number, from: TelegramUser) {
    const message = `
üëã –ü—Ä–∏–≤–µ—Ç, <b>${from.first_name}</b>!

–Ø –±–æ—Ç ArbiConnect –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.

üîó <b>–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:</b>
1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç ArbiConnect
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID: <code>${chatId}</code>
4. –í–∫–ª—é—á–∏—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/stats - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/report - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ü–æ–º–æ—â—å
    `;

    await this.sendMessage(chatId, message);
  }

  private async handleHelpCommand(chatId: number) {
    const message = `
üÜò <b>–ü–û–ú–û–©–¨</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
/report - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
‚Ä¢ Fraud –∞–ª–µ—Ä—Ç—ã  
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chat ID: <code>${chatId}</code> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è

üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support
    `;

    await this.sendMessage(chatId, message);
  }

  private async handleStatsCommand(chatId: number, telegramUserId: number) {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram Chat ID
    const user = await storage.getUserByTelegramChatId(chatId);
    
    if (!user) {
      await this.sendMessage(chatId, 
        '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.'
      );
      return;
    }

    const message = `
üìä <b>–¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> ${user.username}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance} USD
üìà <b>–í—Å–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–æ–≤:</b> –ó–∞–≥—Ä—É–∑–∫–∞...
üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> –ó–∞–≥—Ä—É–∑–∫–∞...
üë• <b>–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤:</b> –ó–∞–≥—Ä—É–∑–∫–∞...

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
    `;

    await this.sendMessage(chatId, message);
  }

  private async handleReportCommand(chatId: number, telegramUserId: number) {
    const user = await storage.getUserByTelegramChatId(chatId);
    
    if (!user) {
      await this.sendMessage(chatId, 
        '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.'
      );
      return;
    }

    await this.sendDailyReport(user.id);
  }

  private async handleSettingsCommand(chatId: number, telegramUserId: number) {
    const message = `
‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

üîî <b>–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å:</b>
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ - –í–∫–ª—é—á–µ–Ω–æ ‚úÖ
‚Ä¢ Fraud –∞–ª–µ—Ä—Ç—ã - –í–∫–ª—é—á–µ–Ω–æ ‚úÖ  
‚Ä¢ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã - –í–∫–ª—é—á–µ–Ω–æ ‚úÖ

‚è∞ <b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤:</b> 09:00 UTC

üì± <b>Chat ID:</b> <code>${chatId}</code>

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ ArbiConnect
    `;

    await this.sendMessage(chatId, message);
  }

  private async handleUnknownCommand(chatId: number) {
    await this.sendMessage(chatId, 
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
    );
  }
}

export const telegramBot = new TelegramBotService();