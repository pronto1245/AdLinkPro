#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
// –ó–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

import { scheduledCertificateRenewal } from '../server/services/letsencrypt.js';

async function main() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤');
  console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}`);
  
  try {
    await scheduledCertificateRenewal();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email/slack)
    if (process.env.SSL_WEBHOOK_URL) {
      try {
        await fetch(process.env.SSL_WEBHOOK_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            type: 'ssl_renewal_error',
            error: error.message,
            timestamp: new Date().toISOString()
          })
        });
      } catch (webhookError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', webhookError);
      }
    }
    
    process.exit(1);
  }
}

main();