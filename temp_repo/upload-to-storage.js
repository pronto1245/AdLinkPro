// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Object Storage
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function uploadFileToStorage() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º upload URL
    const uploadResponse = await fetch('http://localhost:5000/api/objects/upload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!uploadResponse.ok) {
      throw new Error(`Failed to get upload URL: ${uploadResponse.status}`);
    }
    
    const { uploadURL } = await uploadResponse.json();
    console.log('‚úÖ Upload URL –ø–æ–ª—É—á–µ–Ω:', uploadURL);
    
    // 2. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const filePath = path.join(__dirname, 'public', 'test-site.html');
    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
    
    const fileContent = fs.readFileSync(filePath);
    console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', fileContent.length, '–±–∞–π—Ç');
    
    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const uploadFileResponse = await fetch(uploadURL, {
      method: 'PUT',
      body: fileContent,
      headers: {
        'Content-Type': 'text/html'
      }
    });
    
    if (!uploadFileResponse.ok) {
      throw new Error(`Failed to upload file: ${uploadFileResponse.status}`);
    }
    
    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Object Storage!');
    console.log('üåê URL —Ñ–∞–π–ª–∞:', uploadURL.split('?')[0]);
    
    // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ACL –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª
    const normalizedPath = uploadURL.split('?')[0].replace(/^https:\/\/[^\/]+/, '');
    console.log('üìÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:', normalizedPath);
    
    return uploadURL;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  uploadFileToStorage();
}

export { uploadFileToStorage };