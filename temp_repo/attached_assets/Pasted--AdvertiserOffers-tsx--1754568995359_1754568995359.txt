// ✅ AdvertiserOffers.tsx: офферы рекламодателя с предпросмотром лендинга, созданием, редактированием, фильтрацией, флагами, экспортом, drag’n’drop reorder, массовыми действиями и редактором лендингов, а также назначением офферов партнёрам с логикой запроса доступа и одобрения. Видимая вкладка "Архив" активна всегда.

import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogTrigger, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';
import { toast } from 'sonner';
import { Download, Edit, Flag, Plus, Trash2, Eye, Settings2, Users2, PenTool, Archive, Copy, Play, ArrowUp, ArrowDown, ExternalLink, GripVertical } from 'lucide-react';
import OfferEditModal from './OfferEditModal';
import OfferForm from './OfferForm';
import { apiRequest } from '@/lib/api';
import { formatNumber } from '@/lib/utils';
import { useRouter } from 'next/router';
import { DndContext, closestCenter } from '@dnd-kit/core';
import { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { restrictToVerticalAxis } from '@dnd-kit/modifiers';

function DraggableRow({ offer, index, children }: any) {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: offer.id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };
  return (
    <TableRow ref={setNodeRef} style={style} {...attributes}>
      <TableCell {...listeners} className="cursor-grab">
        <GripVertical className="w-4 h-4 text-muted-foreground" />
      </TableCell>
      {children}
    </TableRow>
  );
}

const AdvertiserOffers = () => {
  const queryClient = useQueryClient();
  const router = useRouter();
  const [editOffer, setEditOffer] = useState(null);
  const [confirmDelete, setConfirmDelete] = useState<any>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [search, setSearch] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('active');
  const [selectedOffers, setSelectedOffers] = useState<string[]>([]);

  const { data: offers = [], isLoading } = useQuery({
    queryKey: ['offers'],
    queryFn: () => apiRequest('/offers'),
  });

  const updateMutation = useMutation({
    mutationFn: (data: any) =>
      data.id ? apiRequest(`/offers/${data.id}`, 'PATCH', data) : apiRequest(`/offers`, 'POST', data),
    onSuccess: () => {
      toast.success('Оффер сохранён');
      queryClient.invalidateQueries(['offers']);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (ids: string[]) => apiRequest(`/offers/bulk-delete`, 'POST', { ids }),
    onSuccess: () => {
      toast.success('Удалено');
      queryClient.invalidateQueries(['offers']);
      setSelectedOffers([]);
    },
  });

  const filtered = offers
    .filter(o => o.name.toLowerCase().includes(search.toLowerCase()))
    .filter(o => selectedStatus === 'all' || o.status === selectedStatus);

  const handleAction = (offer: any, action: string) => {
    switch (action) {
      case 'activate':
        updateMutation.mutate({ ...offer, status: 'active' });
        break;
      case 'archive':
        updateMutation.mutate({ ...offer, status: 'archived' });
        break;
      case 'duplicate':
        const duplicated = {
          ...offer,
          id: undefined,
          createdAt: undefined,
          updatedAt: undefined,
          name: offer.name + ' (копия)',
        };
        updateMutation.mutate(duplicated);
        break;
      case 'delete':
        setConfirmDelete(offer);
        break;
      case 'preview':
        if (offer?.landingUrls?.[0]) {
          window.open(offer.landingUrls[0], '_blank');
        } else {
          toast.warning('Нет доступной ссылки для предпросмотра');
        }
        break;
      case 'assign':
        router.push(`/advertiser/offers/${offer.id}/assign`);
        break;
      case 'edit-landing':
        router.push(`/advertiser/offers/${offer.id}/landing-editor`);
        break;
      default:
        break;
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between gap-4">
        <Input placeholder="Поиск офферов..." value={search} onChange={e => setSearch(e.target.value)} className="w-64" />
        <div className="flex gap-2">
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-36">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Все</SelectItem>
              <SelectItem value="active">Активные</SelectItem>
              <SelectItem value="paused">Пауза</SelectItem>
              <SelectItem value="archived">Архив</SelectItem>
            </SelectContent>
          </Select>
          <Button onClick={() => toast('Выбрано: ' + selectedOffers.length)}>Массово</Button>
          <Button onClick={handleExport}><Download className="w-4 h-4 mr-1" /> Экспорт</Button>
        </div>
      </div>

      <DndContext collisionDetection={closestCenter} modifiers={[restrictToVerticalAxis]}
        onDragEnd={({ active, over }) => {
          if (active.id !== over?.id) {
            const oldIndex = filtered.findIndex(o => o.id === active.id);
            const newIndex = filtered.findIndex(o => o.id === over?.id);
            const newOrder = arrayMove(filtered, oldIndex, newIndex);
            queryClient.setQueryData(['offers'], newOrder);
            apiRequest('/offers/reorder', 'POST', { ids: newOrder.map(o => o.id) });
          }
        }}>
        <SortableContext items={filtered.map(o => o.id)} strategy={verticalListSortingStrategy}>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead></TableHead>
                <TableHead>Оффер</TableHead>
                <TableHead>GEO</TableHead>
                <TableHead>Payout</TableHead>
                <TableHead>Категория</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead>Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filtered.map((offer, index) => (
                <DraggableRow key={offer.id} offer={offer} index={index}>
                  <TableCell>
                    <Checkbox
                      checked={selectedOffers.includes(offer.id)}
                      onCheckedChange={(v) => {
                        if (v) setSelectedOffers([...selectedOffers, offer.id]);
                        else setSelectedOffers(selectedOffers.filter(id => id !== offer.id));
                      }}
                    />
                  </TableCell>
                  <TableCell>{offer.name}</TableCell>
                  <TableCell>{offer.geo?.join(', ')}</TableCell>
                  <TableCell>{formatNumber(offer.payout)}</TableCell>
                  <TableCell>{offer.category}</TableCell>
                  <TableCell><Badge>{offer.status}</Badge></TableCell>
                  <TableCell className="flex gap-1 flex-wrap">
                    <Button size="sm" variant="ghost" onClick={() => setEditOffer(offer)}><Edit className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'activate')}><Play className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'archive')}><Archive className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'duplicate')}><Copy className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'delete')}><Trash2 className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'preview')}><Eye className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'assign')}><Users2 className="w-4 h-4" /></Button>
                    <Button size="sm" variant="ghost" onClick={() => handleAction(offer, 'edit-landing')}><PenTool className="w-4 h-4" /></Button>
                  </TableCell>
                </DraggableRow>
              ))}
            </TableBody>
          </Table>
        </SortableContext>
      </DndContext>

      {editOffer && (
        <OfferEditModal open={!!editOffer} onOpenChange={() => setEditOffer(null)}>
          <OfferForm
            initialData={editOffer}
            onSubmit={(data) => {
              updateMutation.mutate(data);
              setEditOffer(null);
            }}
            onCancel={() => setEditOffer(null)}
          />
        </OfferEditModal>
      )}

      {confirmDelete && (
        <AlertDialog open={true} onOpenChange={() => setConfirmDelete(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Удалить оффер?</AlertDialogTitle>
            </AlertDialogHeader>
            <p className="text-sm text-muted-foreground">Это действие необратимо. Вы уверены, что хотите удалить оффер «{confirmDelete.name}»?</p>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setConfirmDelete(null)}>Отмена</AlertDialogCancel>
              <AlertDialogAction onClick={() => {
                deleteMutation.mutate([confirmDelete.id]);
                setConfirmDelete(null);
              }}>Удалить</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
};

export default AdvertiserOffers;
