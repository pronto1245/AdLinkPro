        {/* API ACCESS TAB */}
        <TabsContent value="api" className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-semibold">API-доступ</h2>
            <Button onClick={handleTokenGenerate}>
              <Key className="h-4 w-4 mr-2" />
              Создать новый токен
            </Button>
          </div>

          {/* API TOKENS */}
          <Card>
            <CardHeader>
              <CardTitle>API токены</CardTitle>
              <CardDescription>
                Секретные токены для интеграций и API-запросов
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {tokensLoading ? (
                  <div>Загрузка токенов...</div>
                ) : apiTokens && apiTokens.length > 0 ? (
                  apiTokens.map(token => (
                    <div key={token.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="space-y-1">
                        <div className="font-medium">{token.name}</div>
                        <div className="text-sm text-muted-foreground">
                          Создан: {new Date(token.createdAt).toLocaleDateString()}
                          {token.lastUsed && ` • Последнее использование: ${new Date(token.lastUsed).toLocaleDateString()}`}
                        </div>
                        <div className="font-mono text-sm bg-muted p-2 rounded">
                          {showTokens[token.id] ? token.token : '••••••••••••••••••••••••••••••••'}
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button size="sm" variant="outline" onClick={() => handleToggleTokenVisibility(token.id)}>
                          {showTokens[token.id] ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => handleCopyToken(token.token)}>
                          <Copy className="h-4 w-4" />
                        </Button>
                        <Button size="sm" variant="destructive" onClick={() => deleteTokenMutation.mutate(token.id)}>
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    У вас пока нет API токенов
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* WEBHOOK */}
          <Card>
            <CardHeader>
              <CardTitle>Webhook настройки</CardTitle>
              <CardDescription>
                URL по умолчанию для постбеков и IP-белый список
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="defaultWebhookUrl">Webhook URL по умолчанию</Label>
                <Input
                  id="defaultWebhookUrl"
                  value={webhookForm.defaultUrl}
                  onChange={(e) => setWebhookForm(prev => ({ ...prev, defaultUrl: e.target.value }))}
                  placeholder="https://your-domain.com/postback"
                />
              </div>

              <div>
                <Label htmlFor="ipWhitelist">IP-белый список</Label>
                <Textarea
                  id="ipWhitelist"
                  value={webhookForm.ipWhitelist.join('\n')}
                  onChange={(e) =>
                    setWebhookForm(prev => ({
                      ...prev,
                      ipWhitelist: e.target.value.split('\n').map(ip => ip.trim()).filter(Boolean)
                    }))
                  }
                  placeholder="192.168.1.1\n10.0.0.1"
                  rows={4}
                />
                <div className="text-sm text-muted-foreground mt-1">
                  Один IP на строку
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="webhookEnabled"
                  checked={webhookForm.enabled}
                  onCheckedChange={(checked) => setWebhookForm(prev => ({ ...prev, enabled: checked }))}
                />
                <Label htmlFor="webhookEnabled">Включить Webhook</Label>
              </div>

              <Button onClick={handleWebhookSave}>
                Сохранить настройки Webhook
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
