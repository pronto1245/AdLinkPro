import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { AlertCircle, CheckCircle2, Copy, RefreshCw, Trash2, Eye, EyeOff, User, Building2, Globe, Save, Key, Bell, Shield, Link } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
import { useAuth } from '@/contexts/auth-context';
import { useToast } from '@/hooks/use-toast';

interface AdvertiserProfile {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  company: string;
  phone: string;
  telegram: string;
  country: string;
  language: string;
  timezone: string;
  currency: string;
  settings?: {
    brandName?: string;
    brandDescription?: string;
    brandLogo?: string;
    vertical?: string;
    partnerRules?: string;
    notifications?: {
      email: boolean;
      telegram: boolean;
      sms: boolean;
    };
  };
}

interface ApiToken {
  id: string;
  token: string;
  name: string;
  lastUsed: string | null;
  createdAt: string;
  isActive: boolean;
}

interface CustomDomain {
  id: string;
  domain: string;
  status: 'pending' | 'verified' | 'error';
  type: 'a_record' | 'cname';
  verificationValue: string;
  createdAt: string;
  lastChecked: string | null;
  errorMessage?: string;
}

interface WebhookSettings {
  defaultUrl: string;
  ipWhitelist: string[];
  enabled: boolean;
}

const LANGUAGES = [
  { value: 'en', label: 'English' },
  { value: 'ru', label: 'Русский' },
  { value: 'es', label: 'Español' },
  { value: 'pt', label: 'Português' },
  { value: 'fr', label: 'Français' },
  { value: 'de', label: 'Deutsch' },
  { value: 'tr', label: 'Türkçe' },
  { value: 'zh', label: '中文' },
  { value: 'it', label: 'Italiano' }
];

const CURRENCIES = [
  { value: 'USD', label: 'US Dollar' },
  { value: 'EUR', label: 'Euro' },
  { value: 'GBP', label: 'British Pound' },
  { value: 'RUB', label: 'Russian Ruble' },
  { value: 'BRL', label: 'Brazilian Real' }
];

const TIMEZONES = [
  { value: 'UTC', label: 'UTC' },
  { value: 'America/New_York', label: 'New York (EST/EDT)' },
  { value: 'Europe/London', label: 'London (GMT/BST)' },
  { value: 'Europe/Moscow', label: 'Moscow (MSK)' },
  { value: 'Asia/Tokyo', label: 'Tokyo (JST)' }
];

export default function AdvertiserProfile() {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const [activeTab, setActiveTab] = useState('account');
  const [isEditing, setIsEditing] = useState(false);
  const [showTokens, setShowTokens] = useState<{ [key: string]: boolean }>({});
  const [newPassword, setNewPassword] = useState({ current: '', new: '', confirm: '' });
  const [formData, setFormData] = useState<Partial<AdvertiserProfile>>({});
  const [domainForm, setDomainForm] = useState({ domain: '', type: 'cname' as 'cname' | 'a_record' });
  const [webhookForm, setWebhookForm] = useState<WebhookSettings>({
    defaultUrl: '',
    ipWhitelist: [],
    enabled: true
  });

  const { data: profile, isLoading } = useQuery({
    queryKey: ['/api/auth/me'],
    enabled: !!user
  });

  const { data: apiTokens, isLoading: tokensLoading } = useQuery<ApiToken[]>({
    queryKey: ['/api/advertiser/profile/tokens']
  });

  const { data: customDomains, isLoading: domainsLoading } = useQuery<CustomDomain[]>({
    queryKey: ['/api/advertiser/profile/domains']
  });

  const { data: webhookSettings, isLoading: webhookLoading } = useQuery<WebhookSettings>({
    queryKey: ['/api/advertiser/profile/webhook']
  });

  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '', 
        email: user.email || '',
        phone: (user as any).phone || '',
        company: user.company || '',
        country: (user as any).country || 'US',
        language: user.language || 'en',
        timezone: (user as any).timezone || 'UTC',
        currency: (user as any).currency || 'USD',
        settings: {
          brandName: (user as any).settings?.brandName || '',
          brandDescription: (user as any).settings?.brandDescription || '',
          brandLogo: (user as any).settings?.brandLogo || '',
          vertical: (user as any).settings?.vertical || '',
          partnerRules: (user as any).settings?.partnerRules || '',
          notifications: {
            email: (user as any).settings?.notifications?.email || false,
            telegram: (user as any).settings?.notifications?.telegram || false,
            sms: (user as any).settings?.notifications?.sms || false
          }
        }
      });
    }
  }, [user]);

  useEffect(() => {
    if (webhookSettings) {
      setWebhookForm({
        defaultUrl: webhookSettings.defaultUrl || '',
        ipWhitelist: webhookSettings.ipWhitelist || [],
        enabled: webhookSettings.enabled !== undefined ? webhookSettings.enabled : true
      });
    }
  }, [webhookSettings]);
