// ✅ AdvertiserOffers.tsx: офферы рекламодателя с предпросмотром лендинга, созданием, редактированием, фильтрацией, флагами, экспортом, drag’n’drop reorder, массовыми действиями и редактором лендингов, а также назначением офферов партнёрам с логикой запроса доступа и одобрения. Видимая вкладка "Архив" активна всегда.

import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { toast } from 'sonner';
import { Download, Edit, Flag, Plus, Trash2, Eye, Settings2, Users2, PenTool, Archive, Copy, Play, ArrowUp, ArrowDown, ExternalLink, GripVertical } from 'lucide-react';
import OfferEditModal from './OfferEditModal';
import OfferForm from './OfferForm';
import { apiRequest } from '@/lib/api';
import { formatNumber } from '@/lib/utils';
import { useLocation } from 'wouter';
import { DndContext } from '@dnd-kit/core';
import { arrayMove, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

function DraggableRow({ offer, index, children }: any) {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: offer.id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };
  return (
    <TableRow ref={setNodeRef} style={style} {...attributes}>
      <TableCell {...listeners} className="cursor-grab">
        <GripVertical className="w-4 h-4 text-muted-foreground" />
      </TableCell>
      {children}
    </TableRow>
  );
}

const AdvertiserOffers = () => {
  const queryClient = useQueryClient();
  const [, navigate] = useLocation();
  const [editOffer, setEditOffer] = useState(null);
  const [confirmDelete, setConfirmDelete] = useState<any>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [search, setSearch] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedOffers, setSelectedOffers] = useState<string[]>([]);

  const { data: offers = [], isLoading } = useQuery({
    queryKey: ['offers'],
    queryFn: () => apiRequest('/offers'),
  });

  const updateMutation = useMutation({
    mutationFn: (data: any) => {
      if (!data.status) {
        data.status = 'active';
      }
      return data.id ? apiRequest(`/offers/${data.id}`, 'PATCH', data) : apiRequest(`/offers`, 'POST', data);
    },
    onSuccess: () => {
      toast.success('Оффер сохранён');
      queryClient.invalidateQueries(['offers']);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (ids: string[]) => apiRequest(`/offers/bulk-delete`, 'POST', { ids }),
    onSuccess: () => {
      toast.success('Удалено');
      queryClient.invalidateQueries(['offers']);
      setSelectedOffers([]);
    },
  });

  const bulkStatusMutation = useMutation({
    mutationFn: ({ ids, status }: { ids: string[]; status: string }) =>
      apiRequest(`/offers/bulk-update`, 'POST', { ids, status }),
    onSuccess: () => {
      toast.success('Статус обновлён');
      queryClient.invalidateQueries(['offers']);
      setSelectedOffers([]);
    },
  });

  const filtered = offers
    .filter(o => o.name.toLowerCase().includes(search.toLowerCase()))
    .filter(o => {
      if (selectedStatus === 'archived') return o.status === 'archived';
      if (selectedStatus === 'all') return true;
      return o.status === selectedStatus;
    });

  const handleBulkStatusChange = (status: string) => {
    bulkStatusMutation.mutate({ ids: selectedOffers, status });
  };

  const handleAction = (offer: any, action: string) => {
    switch (action) {
      case 'activate':
        updateMutation.mutate({ ...offer, status: 'active' });
        break;
      case 'archive':
        updateMutation.mutate({ ...offer, status: 'archived' });
        break;
      case 'duplicate':
        const duplicated = {
          ...offer,
          id: undefined,
          createdAt: undefined,
          updatedAt: undefined,
          name: offer.name + ' (копия)',
        };
        updateMutation.mutate(duplicated);
        break;
      case 'delete':
        setConfirmDelete(offer);
        break;
      case 'preview':
        if (offer?.landingUrls?.[0]) {
          window.open(offer.landingUrls[0], '_blank');
        } else {
          toast.warning('Нет доступной ссылки для предпросмотра');
        }
        break;
      case 'assign':
        navigate(`/advertiser/offers/${offer.id}/assign`);
        break;
      case 'edit-landing':
        navigate(`/advertiser/offers/${offer.id}/landing-editor`);
        break;
      default:
        break;
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between gap-4">
        <Input
          placeholder="Поиск по названию..."
          value={search}
          onChange={e => setSearch(e.target.value)}
          className="w-64"
        />
        <div className="flex gap-2">
          <Button onClick={() => setSelectedStatus('all')} variant={selectedStatus === 'all' ? 'default' : 'outline'}>Все</Button>
          <Button onClick={() => setSelectedStatus('active')} variant={selectedStatus === 'active' ? 'default' : 'outline'}>Активные</Button>
          <Button onClick={() => setSelectedStatus('paused')} variant={selectedStatus === 'paused' ? 'default' : 'outline'}>Приостановленные</Button>
          <Button onClick={() => setSelectedStatus('archived')} variant={selectedStatus === 'archived' ? 'default' : 'outline'}>Архив</Button>
        </div>
      </div>

      {selectedOffers.length > 0 && (
        <div className="flex gap-2">
          <Button onClick={() => handleBulkStatusChange('active')}><Play className="w-4 h-4 mr-1" /> Активировать</Button>
          <Button onClick={() => handleBulkStatusChange('archived')}><Archive className="w-4 h-4 mr-1" /> Архивировать</Button>
          <Button onClick={() => handleBulkStatusChange('paused')}><Pause className="w-4 h-4 mr-1" /> Приостановить</Button>
        </div>
      )}

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead><Checkbox checked={selectedOffers.length === filtered.length} onCheckedChange={(checked) => {
              if (checked) {
                setSelectedOffers(filtered.map(o => o.id));
              } else {
                setSelectedOffers([]);
              }
            }} /></TableHead>
            <TableHead></TableHead>
            <TableHead>Название</TableHead>
            <TableHead>GEO</TableHead>
            <TableHead>Категория</TableHead>
            <TableHead>CR</TableHead>
            <TableHead>Payout</TableHead>
            <TableHead>Статус</TableHead>
            <TableHead></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <DndContext>
            <SortableContext items={filtered.map(o => o.id)} strategy={verticalListSortingStrategy}>
              {filtered.map((offer, index) => (
                <DraggableRow key={offer.id} offer={offer} index={index}>
                  <>
                    <TableCell><Checkbox checked={selectedOffers.includes(offer.id)} onCheckedChange={(checked) => {
                      if (checked) setSelectedOffers(prev => [...prev, offer.id]);
                      else setSelectedOffers(prev => prev.filter(id => id !== offer.id));
                    }} /></TableCell>
                    <TableCell className="font-medium">{offer.name}</TableCell>
                    <TableCell>{offer.geo?.join(', ')}</TableCell>
                    <TableCell>{offer.category}</TableCell>
                    <TableCell>{offer.cr}%</TableCell>
                    <TableCell>{offer.payout}</TableCell>
                    <TableCell>
                      <Badge>{offer.status}</Badge>
                    </TableCell>
                    <TableCell>
                      <Button size="sm" variant="ghost" onClick={() => setEditOffer(offer)}>
                        <Edit className="w-4 h-4" />
                      </Button>
                    </TableCell>
                  </>
                </DraggableRow>
              ))}
            </SortableContext>
          </DndContext>
        </TableBody>
      </Table>

      {editOffer && (
        <OfferEditModal
          offer={editOffer}
          onClose={() => setEditOffer(null)}
          onSave={(updated) => updateMutation.mutate(updated)}
        />
      )}
    </div>
  );
};

export default AdvertiserOffers;
