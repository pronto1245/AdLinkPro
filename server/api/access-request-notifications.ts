import { Express } from 'express';
import { authenticateToken, requireRole, getAuthenticatedUser } from '../middleware/auth';
import { storage } from '../storage';
import { notificationService } from '../services/notification';

export function setupAccessRequestNotifications(app: Express) {
  
  // Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞
  app.post('/api/access-requests/:requestId/notify', authenticateToken, async (req, res) => {
    try {
      const { requestId } = req.params;
      const { action, userId, metadata } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
      const request = await storage.getOfferAccessRequestById(requestId);
      if (!request) {
        return res.status(404).json({ error: 'Request not found' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const offer = await storage.getOffer(request.offerId);
      const partner = await storage.getUser(request.partnerId);
      const advertiser = await storage.getUser(request.advertiserId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
      switch (action) {
        case 'request_created':
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
          await notificationService.sendNotification({
            userId: advertiser.id,
            type: 'access_request',
            title: '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞',
            message: `–ü–∞—Ä—Ç–Ω–µ—Ä ${partner.username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}"`,
            data: {
              requestId,
              offerId: offer.id,
              partnerId: partner.id,
              action: 'view_request'
            }
          });
          break;
          
        case 'request_approved':
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
          await notificationService.sendNotification({
            userId: partner.id,
            type: 'access_approved',
            title: '–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω! üéâ',
            message: `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}" –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω`,
            data: {
              requestId,
              offerId: offer.id,
              action: 'get_offer_link'
            }
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await notificationService.sendEmail({
            to: partner.email,
            subject: `–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ–¥–æ–±—Ä–µ–Ω - ${offer.name}`,
            template: 'access_request_approved',
            data: {
              partnerName: partner.firstName || partner.username,
              offerName: offer.name,
              advertiserCompany: advertiser.company || advertiser.username,
              loginUrl: `${process.env.APP_URL}/affiliate/offers`
            }
          });
          break;
          
        case 'request_rejected':
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          await notificationService.sendNotification({
            userId: partner.id,
            type: 'access_rejected',
            title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω',
            message: `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}" –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω`,
            data: {
              requestId,
              offerId: offer.id,
              reason: metadata?.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            }
          });
          break;
          
        case 'access_revoked':
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± –æ—Ç–∑—ã–≤–µ –¥–æ—Å—Ç—É–ø–∞
          await notificationService.sendNotification({
            userId: partner.id,
            type: 'access_revoked',
            title: '–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω',
            message: `–î–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}" –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω`,
            data: {
              requestId,
              offerId: offer.id,
              reason: metadata?.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            }
          });
          break;
      }
      
      res.json({ success: true });
      
    } catch (error) {
      console.error('Notification error:', error);
      res.status(500).json({ error: 'Failed to send notification' });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
  app.get('/api/access-requests/notifications', authenticateToken, async (req, res) => {
    try {
      const userId = getAuthenticatedUser(req).id;
      const { page = 1, limit = 20, unreadOnly = false } = req.query;
      
      const notifications = await notificationService.getUserNotifications({
        userId,
        types: ['access_request', 'access_approved', 'access_rejected', 'access_revoked'],
        page: Number(page),
        limit: Number(limit),
        unreadOnly: unreadOnly === 'true'
      });
      
      res.json(notifications);
    } catch (error) {
      console.error('Get notifications error:', error);
      res.status(500).json({ error: 'Failed to get notifications' });
    }
  });
  
  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  app.patch('/api/access-requests/notifications/:notificationId/read', authenticateToken, async (req, res) => {
    try {
      const userId = getAuthenticatedUser(req).id;
      const { notificationId } = req.params;
      
      await notificationService.markAsRead(notificationId, userId);
      res.json({ success: true });
    } catch (error) {
      console.error('Mark notification read error:', error);
      res.status(500).json({ error: 'Failed to mark notification as read' });
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function notifyAccessRequestStatusChange(
  requestId: string, 
  action: string, 
  metadata?: any
) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const response = await fetch(`${process.env.API_URL || 'http://localhost:3000'}/api/access-requests/${requestId}/notify`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.INTERNAL_API_TOKEN || 'internal'}`
      },
      body: JSON.stringify({
        action,
        metadata
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    console.log(`Notification sent for request ${requestId}, action: ${action}`);
  } catch (error) {
    console.error('Failed to send access request notification:', error);
  }
}