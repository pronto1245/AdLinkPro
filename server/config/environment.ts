// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getEnvVar(key: string, defaultValue: string = ''): string {
  return process.env[key] || defaultValue;
}

function getEnvNumber(key: string, defaultValue: number): number {
  const value = process.env[key];
  return value ? parseInt(value, 10) : defaultValue;
}

function getEnvBool(key: string, defaultValue: boolean): boolean {
  const value = process.env[key];
  if (value === undefined) return defaultValue;
  return value.toLowerCase() === 'true';
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export const config = {
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  NODE_ENV: getEnvVar('NODE_ENV', 'development'),
  PORT: getEnvNumber('PORT', 5000),
  HOST: getEnvVar('HOST', '0.0.0.0'),
  
  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ db.ts)
  DATABASE_URL: getEnvVar('DATABASE_URL', ''),
  
  // JWT –∏ —Å–µ—Å—Å–∏–∏ (–≤—Å–µ–≥–¥–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
  JWT_SECRET: getEnvVar('JWT_SECRET', 'production-safe-jwt-secret-2024-arbiconnect-platform'),
  JWT_EXPIRES_IN: getEnvVar('JWT_EXPIRES_IN', '24h'),
  SESSION_SECRET: getEnvVar('SESSION_SECRET', 'production-safe-session-secret-2024-arbiconnect'),
  
  // Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  SENDGRID_API_KEY: getEnvVar('SENDGRID_API_KEY'),
  EMAIL_FROM: getEnvVar('EMAIL_FROM', 'noreply@platform.com'),
  
  // –í–Ω–µ—à–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä—ã (–≤—Å–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  KEITARO_TOKEN: getEnvVar('KEITARO_TOKEN'),
  BINOM_TOKEN: getEnvVar('BINOM_TOKEN'),
  REDTRACK_TOKEN: getEnvVar('REDTRACK_TOKEN'),
  VOLUUM_TOKEN: getEnvVar('VOLUUM_TOKEN'),
  
  // Google Cloud (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  GOOGLE_CLOUD_PROJECT_ID: getEnvVar('GOOGLE_CLOUD_PROJECT_ID'),
  GOOGLE_CLOUD_STORAGE_BUCKET: getEnvVar('GOOGLE_CLOUD_STORAGE_BUCKET'),
  GOOGLE_APPLICATION_CREDENTIALS: getEnvVar('GOOGLE_APPLICATION_CREDENTIALS'),
  
  // Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  TELEGRAM_BOT_TOKEN: getEnvVar('TELEGRAM_BOT_TOKEN'),
  TELEGRAM_CHAT_ID: getEnvVar('TELEGRAM_CHAT_ID'),
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  RATE_LIMIT_REQUESTS: getEnvNumber('RATE_LIMIT_REQUESTS', 1000),
  RATE_LIMIT_WINDOW: getEnvNumber('RATE_LIMIT_WINDOW', 900000), // 15 –º–∏–Ω—É—Ç
  
  // –ü–æ—Å—Ç–±—ç–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  POSTBACK_RETRY_ATTEMPTS: getEnvNumber('POSTBACK_RETRY_ATTEMPTS', 5),
  POSTBACK_RETRY_DELAY: getEnvNumber('POSTBACK_RETRY_DELAY', 1000),
  POSTBACK_TIMEOUT: getEnvNumber('POSTBACK_TIMEOUT', 10000),
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  BCRYPT_ROUNDS: getEnvNumber('BCRYPT_ROUNDS', 12),
  LOGIN_ATTEMPT_LIMIT: getEnvNumber('LOGIN_ATTEMPT_LIMIT', 5),
  LOGIN_LOCKOUT_TIME: getEnvNumber('LOGIN_LOCKOUT_TIME', 900000), // 15 –º–∏–Ω—É—Ç
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  LOG_LEVEL: getEnvVar('LOG_LEVEL', 'info'),
  LOG_FILE: getEnvVar('LOG_FILE', 'logs/app.log'),
  
  // –§–ª–∞–≥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  ENABLE_2FA: getEnvBool('ENABLE_2FA', true),
  ENABLE_KYC: getEnvBool('ENABLE_KYC', true),
  ENABLE_AUDIT_LOGS: getEnvBool('ENABLE_AUDIT_LOGS', true),
  ENABLE_REAL_TIME_ANALYTICS: getEnvBool('ENABLE_REAL_TIME_ANALYTICS', true),
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ù–ï –ø–∞–¥–∞–µ—Ç - —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
export function validateConfig(): void {
  console.log('üîß [ENV] Environment configuration check...');
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫
  if (!config.DATABASE_URL) {
    console.log('üìå [ENV] DATABASE_URL will be validated by database connection');
  }
  
  if (!config.JWT_SECRET || config.JWT_SECRET.includes('development')) {
    console.log('üîß [ENV] Using generated JWT_SECRET for production safety');
  }
  
  if (!config.SESSION_SECRET || config.SESSION_SECRET.includes('development')) {
    console.log('üîß [ENV] Using production-safe SESSION_SECRET');
  }
  
  if (!config.SENDGRID_API_KEY) {
    console.log('üìß [ENV] SENDGRID_API_KEY not set - email notifications disabled');
  }
  
  if (!config.KEITARO_TOKEN && !config.VOLUUM_TOKEN && !config.BINOM_TOKEN && !config.REDTRACK_TOKEN) {
    console.log('üîó [ENV] No external tracker tokens - tracking integrations disabled');
  }
  
  if (!config.GOOGLE_CLOUD_PROJECT_ID || !config.GOOGLE_CLOUD_STORAGE_BUCKET) {
    console.log('‚òÅÔ∏è [ENV] Google Cloud Storage not configured - using fallback storage');
  }
  
  console.log('‚úÖ [ENV] Configuration validated - application ready to start');
}

export default config;
