import { db } from '../db';
import { userNotifications } from '@shared/schema';
import { randomUUID } from 'crypto';

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
export type NotificationType = 
  // –ü–∞—Ä—Ç–Ω–µ—Ä—ã
  | 'partner_joined' | 'partner_approved' | 'partner_blocked' | 'partner_payout_requested'
  // –û—Ñ—Ñ–µ—Ä—ã
  | 'offer_created' | 'offer_updated' | 'offer_paused' | 'offer_activated' | 'offer_request_created' | 'offer_request_approved' | 'offer_request_rejected'
  // –ê–Ω—Ç–∏—Ñ—Ä–æ–¥
  | 'antifraud_alert' | 'suspicious_activity' | 'fraud_blocked' | 'high_risk_detected'
  // –§–∏–Ω–∞–Ω—Å—ã
  | 'payment_received' | 'payment_processed' | 'payout_completed' | 'balance_low' | 'commission_earned'
  // –°–∏—Å—Ç–µ–º–∞
  | 'maintenance_scheduled' | 'system_update' | 'api_limit_reached' | 'domain_verified' | 'ssl_renewed'
  // –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  | 'conversion_spike' | 'performance_alert' | 'goal_achieved' | 'new_lead'
  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  | 'referral_joined' | 'referral_commission' | 'referral_goal_reached';

interface NotificationData {
  userId: string;
  type: NotificationType;
  title: string;
  message: string;
  metadata?: Record<string, any>;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function createNotification(data: NotificationData): Promise<void> {
  try {
    await db.insert(userNotifications).values({
      id: randomUUID(),
      userId: data.userId,
      type: data.type,
      title: data.title,
      message: data.message,
      metadata: data.metadata || {},
      isRead: false,
      createdAt: new Date(),
      updatedAt: new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (global.sendWebSocketNotification) {
      global.sendWebSocketNotification(data.userId, {
        type: 'notification',
        data: {
          type: data.priority === 'urgent' ? 'error' : data.priority === 'high' ? 'warning' : 'info',
          title: data.title,
          message: data.message,
          metadata: data.metadata
        },
        timestamp: new Date().toISOString()
      });
    }

    console.log(`‚úÖ Notification created: ${data.type} for user ${data.userId}`);
  } catch (error) {
    console.error('‚ùå Failed to create notification:', error);
  }
}

// –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

// === –ü–ê–†–¢–ù–ï–†–´ ===
export async function notifyPartnerJoined(advertiserId: string, partnerData: any) {
  await createNotification({
    userId: advertiserId,
    type: 'partner_joined',
    title: 'ü§ù –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
    message: `–ü–∞—Ä—Ç–Ω–µ—Ä "${partnerData.username}" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –≤–∞—à–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ`,
    metadata: {
      partnerId: partnerData.id,
      partnerUsername: partnerData.username,
      partnerEmail: partnerData.email,
      country: partnerData.country
    },
    priority: 'medium'
  });
}

export async function notifyPartnerBlocked(advertiserId: string, partnerData: any, reason: string) {
  await createNotification({
    userId: advertiserId,
    type: 'partner_blocked',
    title: 'üö´ –ü–∞—Ä—Ç–Ω–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
    message: `–ü–∞—Ä—Ç–Ω–µ—Ä "${partnerData.username}" –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`,
    metadata: {
      partnerId: partnerData.id,
      partnerUsername: partnerData.username,
      blockReason: reason
    },
    priority: 'high'
  });
}

// === –û–§–§–ï–†–´ ===
export async function notifyOfferCreated(advertiserId: string, offerData: any) {
  await createNotification({
    userId: advertiserId,
    type: 'offer_created',
    title: 'üéØ –ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω',
    message: `–û—Ñ—Ñ–µ—Ä "${offerData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`,
    metadata: {
      offerId: offerData.id,
      offerName: offerData.name,
      payout: offerData.payout,
      category: offerData.category
    },
    priority: 'medium'
  });
}

export async function notifyOfferRequestCreated(advertiserId: string, requestData: any) {
  await createNotification({
    userId: advertiserId,
    type: 'offer_request_created',
    title: 'üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ—Ñ–µ—Ä',
    message: `–ü–∞—Ä—Ç–Ω–µ—Ä "${requestData.partnerName}" –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${requestData.offerName}"`,
    metadata: {
      requestId: requestData.id,
      partnerId: requestData.partnerId,
      partnerName: requestData.partnerName,
      offerId: requestData.offerId,
      offerName: requestData.offerName,
      requestMessage: requestData.message
    },
    priority: 'high'
  });
}

// === –ê–ù–¢–ò–§–†–û–î ===
export async function notifyAntifraudAlert(userId: string, alertData: any) {
  await createNotification({
    userId: userId,
    type: 'antifraud_alert',
    title: '‚ö†Ô∏è –ê–Ω—Ç–∏—Ñ—Ä–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
    message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${alertData.description}`,
    metadata: {
      alertId: alertData.id,
      riskLevel: alertData.riskLevel,
      type: alertData.type,
      ip: alertData.ip,
      details: alertData.details
    },
    priority: 'urgent'
  });
}

export async function notifyHighRiskDetected(userId: string, riskData: any) {
  await createNotification({
    userId: userId,
    type: 'high_risk_detected',
    title: 'üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ñ—Ä–æ–¥–∞',
    message: `–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ñ—Ä–æ–¥–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä—É "${riskData.offerName}"`,
    metadata: {
      offerId: riskData.offerId,
      offerName: riskData.offerName,
      riskScore: riskData.riskScore,
      indicators: riskData.indicators
    },
    priority: 'urgent'
  });
}

// === –§–ò–ù–ê–ù–°–´ ===
export async function notifyPaymentReceived(userId: string, paymentData: any) {
  await createNotification({
    userId: userId,
    type: 'payment_received',
    title: 'üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
    message: `–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${paymentData.amount} ${paymentData.currency}`,
    metadata: {
      paymentId: paymentData.id,
      amount: paymentData.amount,
      currency: paymentData.currency,
      method: paymentData.method
    },
    priority: 'medium'
  });
}

export async function notifyPayoutCompleted(userId: string, payoutData: any) {
  await createNotification({
    userId: userId,
    type: 'payout_completed',
    title: '‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    message: `–í—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${payoutData.amount} ${payoutData.currency} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`,
    metadata: {
      payoutId: payoutData.id,
      amount: payoutData.amount,
      currency: payoutData.currency,
      method: payoutData.method,
      recipient: payoutData.recipient
    },
    priority: 'high'
  });
}

export async function notifyCommissionEarned(userId: string, commissionData: any) {
  await createNotification({
    userId: userId,
    type: 'commission_earned',
    title: 'üíé –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∞',
    message: `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è ${commissionData.amount} ${commissionData.currency} –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é`,
    metadata: {
      conversionId: commissionData.conversionId,
      amount: commissionData.amount,
      currency: commissionData.currency,
      offerName: commissionData.offerName
    },
    priority: 'medium'
  });
}

// === –°–ò–°–¢–ï–ú–ê ===
export async function notifyMaintenanceScheduled(userId: string, maintenanceData: any) {
  await createNotification({
    userId: userId,
    type: 'maintenance_scheduled',
    title: 'üîß –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
    message: `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å ${maintenanceData.startTime} –¥–æ ${maintenanceData.endTime}`,
    metadata: {
      startTime: maintenanceData.startTime,
      endTime: maintenanceData.endTime,
      description: maintenanceData.description
    },
    priority: 'medium'
  });
}

export async function notifyDomainVerified(userId: string, domainData: any) {
  await createNotification({
    userId: userId,
    type: 'domain_verified',
    title: 'üåê –î–æ–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    message: `–î–æ–º–µ–Ω "${domainData.domain}" —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`,
    metadata: {
      domain: domainData.domain,
      sslStatus: domainData.sslStatus
    },
    priority: 'high'
  });
}

// === –ö–û–ù–í–ï–†–°–ò–ò ===
export async function notifyNewLead(userId: string, leadData: any) {
  await createNotification({
    userId: userId,
    type: 'new_lead',
    title: 'üéØ –ù–æ–≤—ã–π –ª–∏–¥',
    message: `–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ª–∏–¥ –ø–æ –æ—Ñ—Ñ–µ—Ä—É "${leadData.offerName}" –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ "${leadData.partnerName}"`,
    metadata: {
      leadId: leadData.id,
      offerId: leadData.offerId,
      offerName: leadData.offerName,
      partnerId: leadData.partnerId,
      partnerName: leadData.partnerName,
      payout: leadData.payout
    },
    priority: 'medium'
  });
}

export async function notifyConversionSpike(userId: string, spikeData: any) {
  await createNotification({
    userId: userId,
    type: 'conversion_spike',
    title: 'üìà –í—Å–ø–ª–µ—Å–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–π',
    message: `–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ –æ—Ñ—Ñ–µ—Ä—É "${spikeData.offerName}" - ${spikeData.increase}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å`,
    metadata: {
      offerId: spikeData.offerId,
      offerName: spikeData.offerName,
      increase: spikeData.increase,
      currentRate: spikeData.currentRate
    },
    priority: 'high'
  });
}

// === –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ===
export async function notifyReferralJoined(userId: string, referralData: any) {
  await createNotification({
    userId: userId,
    type: 'referral_joined',
    title: 'üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª',
    message: `–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä "${referralData.username}"`,
    metadata: {
      referralId: referralData.id,
      referralUsername: referralData.username,
      referralCode: referralData.referralCode
    },
    priority: 'medium'
  });
}

export async function notifyReferralCommission(userId: string, commissionData: any) {
  await createNotification({
    userId: userId,
    type: 'referral_commission',
    title: 'üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è',
    message: `–ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è ${commissionData.amount} ${commissionData.currency} –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞`,
    metadata: {
      amount: commissionData.amount,
      currency: commissionData.currency,
      referralName: commissionData.referralName,
      source: commissionData.source
    },
    priority: 'high'
  });
}