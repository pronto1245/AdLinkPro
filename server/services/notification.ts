import { sendEmail } from './email';

export interface NotificationEvent {
  type: 'user_registration' | 'user_blocked' | 'new_device_login' | 'password_reset' | 'fraud_alert' | 'role_assigned';
  userId: string;
  data: any;
  metadata?: {
    ipAddress?: string;
    userAgent?: string;
    location?: string;
  };
}

export interface NotificationSettings {
  email: boolean;
  telegram: boolean;
  webhook: boolean;
  channels: {
    user_registration: string[];
    user_blocked: string[];
    new_device_login: string[];
    fraud_alert: string[];
  };
}

class NotificationService {
  private settings: NotificationSettings = {
    email: true,
    telegram: false,
    webhook: false,
    channels: {
      user_registration: ['email'],
      user_blocked: ['email', 'telegram'],
      new_device_login: ['email'],
      fraud_alert: ['email', 'telegram']
    }
  };

  async sendNotification(event: NotificationEvent): Promise<void> {
    try {
      console.log(`Processing notification: ${event.type} for user ${event.userId}`);
      
      // Get notification channels for this event type
      const channels = this.settings.channels[event.type as keyof typeof this.settings.channels] || [];
      
      // Send email notifications
      if (channels.includes('email') && this.settings.email) {
        await this.sendEmailNotification(event);
      }
      
      // Send Telegram notifications
      if (channels.includes('telegram') && this.settings.telegram) {
        await this.sendTelegramNotification(event);
      }
      
      // Send webhook notifications
      if (channels.includes('webhook') && this.settings.webhook) {
        await this.sendWebhookNotification(event);
      }
      
      // Log the event
      await this.logEvent(event);
      
    } catch (error) {
      console.error('Notification service error:', error);
    }
  }

  private async sendEmailNotification(event: NotificationEvent): Promise<void> {
    try {
      const emailContent = this.generateEmailContent(event);
      
      // Send to admin emails
      const adminEmails = process.env.ADMIN_EMAILS?.split(',') || ['admin@example.com'];
      
      for (const email of adminEmails) {
        await sendEmail({
          to: email.trim(),
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: emailContent.subject,
          html: emailContent.html,
          text: emailContent.text
        });
      }
      
    } catch (error) {
      console.error('Email notification error:', error);
    }
  }

  private async sendTelegramNotification(event: NotificationEvent): Promise<void> {
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      const chatId = process.env.TELEGRAM_CHAT_ID;
      
      if (!botToken || !chatId) {
        console.log('Telegram credentials not configured');
        return;
      }
      
      const message = this.generateTelegramMessage(event);
      
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML'
        })
      });
      
      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }
      
    } catch (error) {
      console.error('Telegram notification error:', error);
    }
  }

  private async sendWebhookNotification(event: NotificationEvent): Promise<void> {
    try {
      const webhookUrl = process.env.WEBHOOK_URL;
      
      if (!webhookUrl) {
        console.log('Webhook URL not configured');
        return;
      }
      
      const payload = {
        event: event.type,
        userId: event.userId,
        data: event.data,
        metadata: event.metadata,
        timestamp: new Date().toISOString()
      };
      
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        throw new Error(`Webhook error: ${response.statusText}`);
      }
      
    } catch (error) {
      console.error('Webhook notification error:', error);
    }
  }

  private generateEmailContent(event: NotificationEvent): { subject: string; html: string; text: string } {
    const { type, data, metadata } = event;
    
    switch (type) {
      case 'user_registration':
        return {
          subject: `–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${data.username}`,
          html: `
            <h2>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è</h2>
            <p><strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${data.username}</p>
            <p><strong>Email:</strong> ${data.email}</p>
            <p><strong>–†–æ–ª—å:</strong> ${data.role}</p>
            <p><strong>IP –∞–¥—Ä–µ—Å:</strong> ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
          `,
          text: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: ${data.username} (${data.email})`
        };
        
      case 'user_blocked':
        return {
          subject: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${data.username}`,
          html: `
            <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</h2>
            <p><strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${data.username}</p>
            <p><strong>Email:</strong> ${data.email}</p>
            <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${data.reason}</p>
            <p><strong>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</strong> ${data.blockedBy}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
          `,
          text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${data.username}. –ü—Ä–∏—á–∏–Ω–∞: ${data.reason}`
        };
        
      case 'new_device_login':
        return {
          subject: `–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${data.username}`,
          html: `
            <h2>–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${data.username}</p>
            <p><strong>IP –∞–¥—Ä–µ—Å:</strong> ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>User Agent:</strong> ${metadata?.userAgent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
          `,
          text: `–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${data.username} —Å IP ${metadata?.ipAddress}`
        };
        
      case 'fraud_alert':
        return {
          subject: `üö® –§—Ä–æ–¥-–∞–ª–µ—Ä—Ç: ${data.type}`,
          html: `
            <h2 style="color: red;">–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
            <p><strong>–¢–∏–ø –∞–ª–µ—Ä—Ç–∞:</strong> ${data.type}</p>
            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${data.username}</p>
            <p><strong>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</strong> ${data.severity}</p>
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${data.description}</p>
            <p><strong>IP –∞–¥—Ä–µ—Å:</strong> ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
          `,
          text: `–§—Ä–æ–¥-–∞–ª–µ—Ä—Ç: ${data.type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.username}`
        };
        
      default:
        return {
          subject: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${type}`,
          html: `<p>–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${type}</p><pre>${JSON.stringify(data, null, 2)}</pre>`,
          text: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${type}`
        };
    }
  }

  private generateTelegramMessage(event: NotificationEvent): string {
    const { type, data, metadata } = event;
    
    switch (type) {
      case 'user_registration':
        return `
üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.username}
üìß Email: ${data.email}
üé≠ –†–æ–ª—å: ${data.role}
üåê IP: ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è∞ ${new Date().toLocaleString()}
        `.trim();
        
      case 'user_blocked':
        return `
üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.username}
üìß Email: ${data.email}
‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: ${data.reason}
üëÆ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${data.blockedBy}
‚è∞ ${new Date().toLocaleString()}
        `.trim();
        
      case 'new_device_login':
        return `
üîê <b>–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.username}
üåê IP: ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${metadata?.userAgent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è∞ ${new Date().toLocaleString()}
        `.trim();
        
      case 'fraud_alert':
        return `
üö® <b>–§–†–û–î-–ê–õ–ï–†–¢</b>
‚ö†Ô∏è –¢–∏–ø: ${data.type}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.username}
üî• –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${data.severity}
üìù ${data.description}
üåê IP: ${metadata?.ipAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è∞ ${new Date().toLocaleString()}
        `.trim();
        
      default:
        return `üìä –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${type}`;
    }
  }

  private async logEvent(event: NotificationEvent): Promise<void> {
    try {
      // Log to console for now - in production, save to database
      console.log('Event logged:', {
        type: event.type,
        userId: event.userId,
        timestamp: new Date().toISOString(),
        data: event.data
      });
    } catch (error) {
      console.error('Event logging error:', error);
    }
  }

  updateSettings(newSettings: Partial<NotificationSettings>): void {
    this.settings = { ...this.settings, ...newSettings };
  }

  getSettings(): NotificationSettings {
    return this.settings;
  }
}

export const notificationService = new NotificationService();

// Helper functions for common notifications
export const notifyUserRegistration = (userData: any, metadata?: any) => {
  return notificationService.sendNotification({
    type: 'user_registration',
    userId: userData.id,
    data: userData,
    metadata
  });
};

export const notifyUserBlocked = (userData: any, reason: string, blockedBy: string, metadata?: any) => {
  return notificationService.sendNotification({
    type: 'user_blocked',
    userId: userData.id,
    data: { ...userData, reason, blockedBy },
    metadata
  });
};

export const notifyNewDeviceLogin = (userData: any, metadata?: any) => {
  return notificationService.sendNotification({
    type: 'new_device_login',
    userId: userData.id,
    data: userData,
    metadata
  });
};

export const notifyFraudAlert = (alertData: any, metadata?: any) => {
  return notificationService.sendNotification({
    type: 'fraud_alert',
    userId: alertData.userId,
    data: alertData,
    metadata
  });
};