import { sendEmail } from './email';

export interface NotificationEvent {
  type: 'user_registration' | 'user_blocked' | 'new_device_login' | 'fraud_detected' | 'payment_received' | 'new_referral' | 'referral_earning';
  userId: string;
  data: any;
  timestamp: Date;
}

export class NotificationService {
  private static instance: NotificationService;
  private notifications: NotificationEvent[] = [];

  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  async sendNotification(event: NotificationEvent): Promise<void> {
    try {
      // Store notification
      this.notifications.push(event);

      // Send email notification based on event type
      await this.sendEmailNotification(event);

      // Log notification
      console.log(`Notification sent: ${event.type} for user ${event.userId}`);
    } catch (error) {
      console.error('Failed to send notification:', error);
    }
  }

  private async sendEmailNotification(event: NotificationEvent): Promise<void> {
    const emailConfig = this.getEmailConfig(event);
    
    if (emailConfig) {
      await sendEmail(emailConfig);
    }
  }

  private getEmailConfig(event: NotificationEvent): any {
    const { type, data } = event;

    switch (type) {
      case 'user_registration':
        return {
          to: data.email,
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
          html: `
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${data.firstName || data.username}!</p>
            <p>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
            <p>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</p>
            <ul>
              <li>Email: ${data.email}</li>
              <li>–†–æ–ª—å: ${data.role}</li>
            </ul>
          `,
          text: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`
        };

      case 'user_blocked':
        return {
          to: data.email,
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          html: `
            <h2>–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</h2>
            <p>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</p>
            <p>–ü—Ä–∏—á–∏–Ω–∞: ${data.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
            <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
          `,
          text: `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${data.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`
        };

      case 'new_device_login':
        return {
          to: data.email,
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: '–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
          html: `
            <h2>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h2>
            <p>–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</p>
            <ul>
              <li>IP –∞–¥—Ä–µ—Å: ${data.ip}</li>
              <li>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</li>
              <li>User Agent: ${data.userAgent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
            </ul>
            <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
          `,
          text: `–í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. IP: ${data.ip}, –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
        };

      case 'fraud_detected':
        return {
          to: process.env.ADMIN_EMAIL || 'admin@platform.com',
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          html: `
            <h2>Fraud Alert</h2>
            <p>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</p>
            <ul>
              <li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.userId}</li>
              <li>–¢–∏–ø: ${data.fraudType}</li>
              <li>–û–ø–∏—Å–∞–Ω–∏–µ: ${data.description}</li>
              <li>IP: ${data.ip}</li>
              <li>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</li>
            </ul>
          `,
          text: `Fraud Alert: ${data.fraudType} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.userId}`
        };

      case 'new_referral':
        return {
          to: data.email,
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: 'üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
          html: `
            <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</h2>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>${data.referredUser}</strong> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.</p>
            <p>–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å ${data.commissionRate}% —Å –µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤!</p>
            <p><strong>–î–µ—Ç–∞–ª–∏:</strong></p>
            <ul>
              <li>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.referredUser}</li>
              <li>Email: ${data.referredEmail}</li>
              <li>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}</li>
              <li>–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: ${data.commissionRate}%</li>
            </ul>
            <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –¥–æ—Ö–æ–¥!</p>
          `,
          text: `–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${data.referredUser}. –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: ${data.commissionRate}%`
        };

      case 'referral_earning':
        return {
          to: data.email,
          from: process.env.FROM_EMAIL || 'noreply@platform.com',
          subject: 'üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é!',
          html: `
            <h2>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∞!</h2>
            <p>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª <strong>${data.referredUser}</strong> –ø–æ–ª—É—á–∏–ª –≤—ã–ø–ª–∞—Ç—É, –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è!</p>
            <p><strong>–î–µ—Ç–∞–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</strong></p>
            <ul>
              <li>–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏: <strong>$${data.commissionAmount}</strong></li>
              <li>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: $${data.originalAmount}</li>
              <li>–†–µ—Ñ–µ—Ä–∞–ª: ${data.referredUser}</li>
              <li>–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}</li>
            </ul>
            <p>–ö–æ–º–∏—Å—Å–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É —Å–ª–µ–¥—É—é—â–µ–º—É –ø–ª–∞—Ç–µ–∂—É.</p>
            <p>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞!</p>
          `,
          text: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: $${data.commissionAmount} –æ—Ç ${data.referredUser}`
        };

      default:
        return null;
    }
  }

  getNotifications(userId?: string): NotificationEvent[] {
    if (userId) {
      return this.notifications.filter(n => n.userId === userId);
    }
    return this.notifications;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function notifyNewReferral(referrer: any, referredUser: any): Promise<void> {
  try {
    console.log('üîó Sending new referral notification to:', referrer.username);
    
    const { db } = await import('../db');
    const { notifications } = await import('@shared/schema');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.insert(notifications).values({
      userId: referrer.id,
      type: 'info',
      title: 'üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referredUser.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –ö–æ–º–∏—Å—Å–∏—è: 5%`,
      data: {
        referredUser: referredUser.username,
        referredEmail: referredUser.email,
        commissionRate: '5'
      },
      isRead: false,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log('‚úÖ Referral notification saved to database');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SendGrid)
    const notificationService = NotificationService.getInstance();
    await notificationService.sendNotification({
      type: 'new_referral',
      userId: referrer.id,
      data: {
        email: referrer.email,
        referredUser: referredUser.username,
        referredEmail: referredUser.email,
        commissionRate: '5'
      },
      timestamp: new Date()
    });
    
  } catch (error) {
    console.error('‚ùå Error sending referral notification:', error);
  }
}

export async function notifyReferralEarning(referrer: any, earningData: any): Promise<void> {
  try {
    console.log('üí∞ Sending referral earning notification to:', referrer.username);
    
    const { db } = await import('../db');
    const { notifications } = await import('@shared/schema');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.insert(notifications).values({
      userId: referrer.id,
      type: 'success',
      title: 'üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è!',
      message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ $${earningData.commissionAmount} –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç ${earningData.referredUser}`,
      data: {
        commissionAmount: earningData.commissionAmount,
        referredUser: earningData.referredUser,
        originalAmount: earningData.originalAmount
      },
      isRead: false,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log('‚úÖ Earning notification saved to database');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationService = NotificationService.getInstance();
    await notificationService.sendNotification({
      type: 'referral_earning',
      userId: referrer.id,
      data: {
        email: referrer.email,
        commissionAmount: earningData.commissionAmount,
        referredUser: earningData.referredUser,
        originalAmount: earningData.originalAmount
      },
      timestamp: new Date()
    });
    
  } catch (error) {
    console.error('‚ùå Error sending earning notification:', error);
  }
}

// –≠—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const notificationService = NotificationService.getInstance();

// Import dependencies for additional notification functions
import { db } from '../db';
import { userNotifications } from '@shared/schema';
import type { User } from '@shared/schema';

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É
export async function notifyOfferAccessRequest(
  advertiser: User, 
  partner: User, 
  offer: any, 
  requestMessage?: string
) {
  try {
    await db.insert(userNotifications).values({
      userId: advertiser.id,
      type: 'offer_access_request',
      title: '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É',
      message: `–ü–∞—Ä—Ç–Ω—ë—Ä ${partner.username} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}"`,
      data: { 
        partnerId: partner.id, 
        partnerUsername: partner.username,
        offerId: offer.id, 
        offerName: offer.name,
        requestMessage 
      },
      channel: 'system',
      status: 'sent'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (global.sendWebSocketNotification) {
      global.sendWebSocketNotification(advertiser.id, {
        type: 'offer_access_request',
        data: {
          partnerUsername: partner.username,
          offerName: offer.name,
          requestMessage
        },
        timestamp: new Date().toISOString()
      });
    }

    console.log(`Offer access request notification sent to advertiser ${advertiser.username}`);
  } catch (error) {
    console.error('Error sending offer access request notification:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
export async function notifyOfferAccessApproved(
  partner: User, 
  advertiser: User, 
  offer: any, 
  responseMessage?: string
) {
  try {
    await db.insert(userNotifications).values({
      userId: partner.id,
      type: 'offer_access_approved',
      title: '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ–¥–æ–±—Ä–µ–Ω',
      message: `–í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}" –æ–¥–æ–±—Ä–µ–Ω`,
      data: { 
        advertiserId: advertiser.id,
        advertiserUsername: advertiser.username,
        offerId: offer.id, 
        offerName: offer.name,
        responseMessage 
      },
      channel: 'system',
      status: 'sent'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (global.sendWebSocketNotification) {
      global.sendWebSocketNotification(partner.id, {
        type: 'offer_access_response',
        data: {
          status: 'approved',
          offerName: offer.name,
          advertiserUsername: advertiser.username,
          responseMessage
        },
        timestamp: new Date().toISOString()
      });
    }

    console.log(`Offer access approved notification sent to partner ${partner.username}`);
  } catch (error) {
    console.error('Error sending offer access approved notification:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
export async function notifyOfferAccessRejected(
  partner: User, 
  advertiser: User, 
  offer: any, 
  responseMessage?: string
) {
  try {
    await db.insert(userNotifications).values({
      userId: partner.id,
      type: 'offer_access_rejected',
      title: '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω',
      message: `–í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É "${offer.name}" –æ—Ç–∫–ª–æ–Ω—ë–Ω`,
      data: { 
        advertiserId: advertiser.id,
        advertiserUsername: advertiser.username,
        offerId: offer.id, 
        offerName: offer.name,
        responseMessage 
      },
      channel: 'system',
      status: 'sent'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (global.sendWebSocketNotification) {
      global.sendWebSocketNotification(partner.id, {
        type: 'offer_access_response',
        data: {
          status: 'rejected',
          offerName: offer.name,
          advertiserUsername: advertiser.username,
          responseMessage
        },
        timestamp: new Date().toISOString()
      });
    }

    console.log(`Offer access rejected notification sent to partner ${partner.username}`);
  } catch (error) {
    console.error('Error sending offer access rejected notification:', error);
  }
}