import acme from 'acme-client';
import crypto from 'crypto';
import { db } from '../db.js';
import { customDomains } from '../../shared/schema.js';
import { eq } from 'drizzle-orm';

export class LetsEncryptService {
  private static client: acme.Client | null = null;
  private static accountKey: Buffer | null = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ACME –∫–ª–∏–µ–Ω—Ç–∞
  static async initializeClient(): Promise<void> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      this.accountKey = await this.getOrCreateAccountKey();
      
      // –°–æ–∑–¥–∞–µ–º ACME –∫–ª–∏–µ–Ω—Ç (staging –¥–ª—è —Ç–µ—Å—Ç–æ–≤, production –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
      const directoryUrl = process.env.NODE_ENV === 'production' 
        ? acme.directory.letsencrypt.production
        : acme.directory.letsencrypt.staging;

      this.client = new acme.Client({
        directoryUrl,
        accountKey: this.accountKey
      });

      // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      await this.createAccount();
      
      console.log('‚úÖ Let\'s Encrypt ACME –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Let\'s Encrypt:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞
  private static async getOrCreateAccountKey(): Promise<Buffer> {
    const keyPath = process.env.LETSENCRYPT_ACCOUNT_KEY_PATH || './.letsencrypt/account.key';
    
    try {
      const fs = await import('fs/promises');
      return await fs.readFile(keyPath);
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
      const accountKey = await acme.crypto.createPrivateKey();
      
      try {
        const fs = await import('fs/promises');
        const path = await import('path');
        await fs.mkdir(path.dirname(keyPath), { recursive: true });
        await fs.writeFile(keyPath, accountKey);
      } catch (writeError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞:', writeError);
      }
      
      return accountKey;
    }
  }

  // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç Let's Encrypt
  private static async createAccount(): Promise<void> {
    if (!this.client) throw new Error('ACME –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    try {
      await this.client.createAccount({
        termsOfServiceAgreed: true,
        contact: [
          `mailto:${process.env.LETSENCRYPT_CONTACT_EMAIL || 'admin@your-domain.com'}`
        ]
      });
      console.log('‚úÖ Let\'s Encrypt –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    } catch (error) {
      if (error.type === 'urn:ietf:params:acme:error:accountDoesNotExist') {
        console.log('‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw error;
      }
    }
  }

  // –í—ã–¥–∞—á–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  static async issueRealCertificate(domain: string, domainId: string): Promise<{
    success: boolean;
    certificate?: string;
    privateKey?: string;
    error?: string;
  }> {
    try {
      if (!this.client) {
        await this.initializeClient();
      }

      console.log(`üîí –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${domain}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤—ã–¥–∞–µ—Ç—Å—è"
      await db
        .update(customDomains)
        .set({
          sslStatus: 'pending',
          sslErrorMessage: null,
          updatedAt: new Date()
        })
        .where(eq(customDomains.id, domainId));

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      const order = await this.client!.createOrder({
        identifiers: [
          { type: 'dns', value: domain }
        ]
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authorizations = await this.client!.getAuthorizations(order);
      
      for (const authz of authorizations) {
        // –í—ã–±–∏—Ä–∞–µ–º HTTP-01 challenge
        const httpChallenge = authz.challenges.find(c => c.type === 'http-01');
        if (!httpChallenge) {
          throw new Error('HTTP-01 challenge –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const keyAuthorization = await this.client!.getChallengeKeyAuthorization(httpChallenge);
        
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ:
        // /.well-known/acme-challenge/{httpChallenge.token} -> keyAuthorization
        await this.deployChallengeFile(httpChallenge.token, keyAuthorization);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º Let's Encrypt –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        await this.client!.verifyChallenge(authz, httpChallenge);
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.client!.waitForValidStatus(authz);
        
        // –£–¥–∞–ª—è–µ–º challenge —Ñ–∞–π–ª
        await this.cleanupChallengeFile(httpChallenge.token);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSR –∏ –∫–ª—é—á —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      const [certificateKey, csr] = await acme.crypto.createCsr({
        commonName: domain
      });

      // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
      await this.client!.finalizeOrder(order, csr);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
      const certificate = await this.client!.getCertificate(order);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –±–∞–∑—É
      const validUntil = new Date();
      validUntil.setDate(validUntil.getDate() + 90); // Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞ 90 –¥–Ω–µ–π

      await db
        .update(customDomains)
        .set({
          sslStatus: 'issued',
          sslCertificate: certificate,
          sslPrivateKey: certificateKey.toString(),
          sslValidUntil: validUntil,
          sslIssuer: 'Let\'s Encrypt',
          sslErrorMessage: null,
          isActive: true,
          updatedAt: new Date()
        })
        .where(eq(customDomains.id, domainId));

      console.log(`‚úÖ –†–µ–∞–ª—å–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –¥–ª—è ${domain}`);

      return {
        success: true,
        certificate,
        privateKey: certificateKey.toString()
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${domain}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      await db
        .update(customDomains)
        .set({
          sslStatus: 'failed',
          sslErrorMessage: error.message,
          updatedAt: new Date()
        })
        .where(eq(customDomains.id, domainId));

      return {
        success: false,
        error: error.message
      };
    }
  }

  // –†–∞–∑–º–µ—â–∞–µ–º challenge —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  private static async deployChallengeFile(token: string, keyAuthorization: string): Promise<void> {
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const challengeDir = path.join(process.cwd(), 'public', '.well-known', 'acme-challenge');
    const challengeFile = path.join(challengeDir, token);
    
    try {
      await fs.mkdir(challengeDir, { recursive: true });
      await fs.writeFile(challengeFile, keyAuthorization);
      console.log(`üìÅ Challenge —Ñ–∞–π–ª —Ä–∞–∑–º–µ—â–µ–Ω: ${challengeFile}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è challenge —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª—è–µ–º challenge —Ñ–∞–π–ª
  private static async cleanupChallengeFile(token: string): Promise<void> {
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const challengeFile = path.join(process.cwd(), 'public', '.well-known', 'acme-challenge', token);
    
    try {
      await fs.unlink(challengeFile);
      console.log(`üóëÔ∏è Challenge —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${challengeFile}`);
    } catch (error) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å challenge —Ñ–∞–π–ª:', error);
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  static async renewCertificates(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π
      const expiringDate = new Date();
      expiringDate.setDate(expiringDate.getDate() + 30);

      const expiringDomains = await db
        .select()
        .from(customDomains)
        .where(
          and(
            eq(customDomains.sslStatus, 'issued'),
            lte(customDomains.sslValidUntil, expiringDate)
          )
        );

      console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${expiringDomains.length} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

      for (const domain of expiringDomains) {
        try {
          console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è ${domain.domain}`);
          await this.issueRealCertificate(domain.domain, domain.id);
          
          // –ñ–¥–µ–º –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limits
          await new Promise(resolve => setTimeout(resolve, 5000));
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${domain.domain}:`, error);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ cron –∑–∞–¥–∞—á–∞—Ö
export async function scheduledCertificateRenewal(): Promise<void> {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤');
  await LetsEncryptService.renewCertificates();
}