import { randomBytes } from 'crypto';
import { db } from '../db.js';
import { customDomains, offers, trackingLinks, type CustomDomain, type InsertCustomDomain } from '@shared/schema';
import { eq, and, desc } from 'drizzle-orm';
import dns from 'dns';
import { promisify } from 'util';

const resolveTxt = promisify(dns.resolveTxt);
const resolveCname = promisify(dns.resolveCname);
const resolve4 = promisify(dns.resolve4);

export class CustomDomainService {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static generateVerificationValue(): string {
    return `platform-verify=${randomBytes(16).toString('hex')}`;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω
  static async createCustomDomain(data: {
    advertiserId: string;
    domain: string;
    type?: 'a_record' | 'cname';
  }): Promise<CustomDomain> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º—É–º 1 –¥–æ–º–µ–Ω)
    const existingDomains = await db
      .select()
      .from(customDomains)
      .where(eq(customDomains.advertiserId, data.advertiserId));

    if (existingDomains.length >= 1) {
      throw new Error('Domain limit exceeded. Each advertiser can add only 1 custom domain.');
    }

    const verificationValue = this.generateVerificationValue();
    const targetValue = data.type === 'cname' 
      ? 'affiliate-tracker.replit.app' 
      : '192.168.1.100'; // –ü—Ä–∏–º–µ—Ä IP –¥–ª—è A –∑–∞–ø–∏—Å–∏

    const [customDomain] = await db
      .insert(customDomains)
      .values({
        advertiserId: data.advertiserId,
        domain: data.domain.toLowerCase(),
        type: data.type || 'cname',
        verificationValue,
        targetValue,
        status: 'pending',
        sslStatus: 'none',
        isActive: false
      })
      .returning();

    return customDomain;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
  static async getAdvertiserDomains(advertiserId: string): Promise<CustomDomain[]> {
    return await db
      .select()
      .from(customDomains)
      .where(eq(customDomains.advertiserId, advertiserId))
      .orderBy(desc(customDomains.createdAt));
  }

  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ–º–µ–Ω —á–µ—Ä–µ–∑ DNS
  static async verifyDomain(domainId: string): Promise<{
    success: boolean;
    status: 'verified' | 'error';
    error?: string;
  }> {
    const [domain] = await db
      .select()
      .from(customDomains)
      .where(eq(customDomains.id, domainId));

    if (!domain) {
      throw new Error('Domain not found');
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º"
      await db
        .update(customDomains)
        .set({ 
          status: 'pending',
          lastChecked: new Date(),
          errorMessage: null 
        })
        .where(eq(customDomains.id, domainId));

      let isVerified = false;
      let errorMessage = '';

      if (domain.type === 'cname') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CNAME –∑–∞–ø–∏—Å—å
        try {
          const records = await resolveCname(domain.domain);
          isVerified = records.some(record => 
            record.includes('platform.com') || record.includes(domain.verificationValue)
          );
          if (!isVerified) {
            errorMessage = `CNAME record not found or incorrect. Expected: ${domain.domain} -> platform-verify.com`;
          }
        } catch (error: any) {
          errorMessage = `Failed to resolve CNAME: ${error.message}`;
        }
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TXT –∑–∞–ø–∏—Å—å –¥–ª—è A record
        try {
          const records = await resolveTxt(domain.domain);
          isVerified = records.some((record: any) => {
            if (Array.isArray(record)) {
              return record.join('').includes(domain.verificationValue);
            } else if (typeof record === 'string') {
              return record.includes(domain.verificationValue);
            }
            return false;
          });
          if (!isVerified) {
            errorMessage = `TXT record not found. Add: ${domain.domain} TXT ${domain.verificationValue}`;
          }
        } catch (error: any) {
          errorMessage = `Failed to resolve TXT: ${error.message}`;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞
      const newStatus: 'verified' | 'error' = isVerified ? 'verified' : 'error';
      
      await db
        .update(customDomains)
        .set({ 
          status: newStatus,
          isActive: isVerified,
          lastChecked: new Date(),
          errorMessage: isVerified ? null : errorMessage
        })
        .where(eq(customDomains.id, domainId));

      // –ï—Å–ª–∏ –¥–æ–º–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      if (isVerified) {
        try {
          console.log(`üîí –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è ${domain.domain}`);
          
          // –í—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω–æ–π –∏ –¥–µ–º–æ –≤—ã–¥–∞—á–µ–π SSL
          // –î–ª—è arbiconnect.store –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SSL
          if (process.env.ENABLE_REAL_SSL === 'true' || domain.domain === 'arbiconnect.store') {
            const { LetsEncryptService } = await import('./letsencrypt.js');
            await LetsEncryptService.issueRealCertificate(domain.domain, domainId);
          } else {
            await this.requestSSLCertificate(domain.domain, domainId);
          }
        } catch (sslError) {
          console.error(`SSL certificate request failed for ${domain.domain}:`, sslError);
          // –ù–µ –¥–µ–ª–∞–µ–º –¥–æ–º–µ–Ω failed –∏–∑-–∑–∞ SSL –æ—à–∏–±–∫–∏, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        }
      }

      return {
        success: isVerified,
        status: newStatus,
        error: isVerified ? undefined : errorMessage
      };

    } catch (error) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      await db
        .update(customDomains)
        .set({ 
          status: 'error',
          lastChecked: new Date(),
          errorMessage: `Verification failed: ${(error as Error).message}`
        })
        .where(eq(customDomains.id, domainId));

      return {
        success: false,
        status: 'error',
        error: (error as Error).message
      };
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  static async requestSSLCertificate(domain: string, domainId: string): Promise<void> {
    try {
      console.log(`üîí –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ SSL –¥–ª—è ${domain}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤—ã–¥–∞–µ—Ç—Å—è"
      await db
        .update(customDomains)
        .set({
          sslStatus: 'pending',
          sslErrorMessage: null,
          updatedAt: new Date()
        })
        .where(eq(customDomains.id, domainId));

      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ Let's Encrypt
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ACME –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
      await this.simulateSSLIssuance(domain, domainId);
      
    } catch (error) {
      console.error(`SSL issuance failed for ${domain}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      await db
        .update(customDomains)
        .set({
          sslStatus: 'failed',
          sslErrorMessage: (error as Error).message,
          updatedAt: new Date()
        })
        .where(eq(customDomains.id, domainId));
    }
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–¥–∞—á–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  private static async simulateSSLIssuance(domain: string, domainId: string): Promise<void> {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–æ–±—ã—á–Ω–æ 1-3 –º–∏–Ω—É—Ç—ã)
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockCertificate = `-----BEGIN CERTIFICATE-----
MIIFXzCCA0egAwIBAgISA${Date.now().toString().slice(-10)}
... (mock certificate data) ...
-----END CERTIFICATE-----`;

    const mockPrivateKey = `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC${Date.now().toString().slice(-15)}
... (mock private key data) ...
-----END PRIVATE KEY-----`;

    const validUntil = new Date();
    validUntil.setMonth(validUntil.getMonth() + 3); // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –º–µ—Å—è—Ü–∞

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω —Å –≤—ã–¥–∞–Ω–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
    await db
      .update(customDomains)
      .set({
        sslStatus: 'issued',
        sslCertificate: mockCertificate,
        sslPrivateKey: mockPrivateKey,
        sslValidUntil: validUntil,
        sslIssuer: 'Let\'s Encrypt (Demo)',
        sslErrorMessage: null,
        isActive: true,
        updatedAt: new Date()
      })
      .where(eq(customDomains.id, domainId));

    console.log(`‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –¥–ª—è ${domain}`);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ SSL –¥–ª—è —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
  static async issueSSLForDomain(domainId: string, advertiserId: string): Promise<{
    success: boolean;
    message: string;
  }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–º–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
      const [domain] = await db
        .select()
        .from(customDomains)
        .where(and(
          eq(customDomains.id, domainId),
          eq(customDomains.advertiserId, advertiserId),
          eq(customDomains.status, 'verified')
        ));

      if (!domain) {
        return {
          success: false,
          message: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
        };
      }

      if (domain.sslStatus === 'issued') {
        return {
          success: false,
          message: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –≤—ã–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞'
        };
      }

      if (domain.sslStatus === 'pending') {
        return {
          success: false,
          message: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –≤—ã–¥–∞–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞'
        };
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–¥–∞—á—É SSL
      await this.requestSSLCertificate(domain.domain, domainId);

      return {
        success: true,
        message: 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
      };

    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ SSL: ${(error as Error).message}`
      };
    }
  }

  // –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω
  static async deleteDomain(domainId: string, advertiserId: string): Promise<void> {
    await db
      .delete(customDomains)
      .where(and(
        eq(customDomains.id, domainId),
        eq(customDomains.advertiserId, advertiserId)
      ));
  }

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
  static async getVerifiedDomains(advertiserId: string): Promise<string[]> {
    const domains = await db
      .select({ domain: customDomains.domain })
      .from(customDomains)
      .where(and(
        eq(customDomains.advertiserId, advertiserId),
        eq(customDomains.status, 'verified'),
        eq(customDomains.isActive, true)
      ));

    return domains.map(d => d.domain);
  }

  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –¥–æ–º–µ–Ω –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
  static async getBestDomain(advertiserId: string): Promise<string | null> {
    const [domain] = await db
      .select({ domain: customDomains.domain })
      .from(customDomains)
      .where(and(
        eq(customDomains.advertiserId, advertiserId),
        eq(customDomains.status, 'verified'),
        eq(customDomains.isActive, true)
      ))
      .orderBy(desc(customDomains.createdAt))
      .limit(1);

    return domain?.domain || null;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
  static async updateTrackingLinksWithDomain(advertiserId: string, domain: string): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è
    const advertiserOffers = await db
      .select({ id: offers.id })
      .from(offers)
      .where(eq(offers.advertiserId, advertiserId));

    const offerIds = advertiserOffers.map(o => o.id);

    if (offerIds.length === 0) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
    for (const offerId of offerIds) {
      await db
        .update(trackingLinks)
        .set({ 
          customDomain: domain,
          updatedAt: new Date()
        })
        .where(eq(trackingLinks.offerId, offerId));
    }
  }

  static async checkSSL(domain: string): Promise<{
    hasSSL: boolean;
    validUntil?: Date;
    issuer?: string;
  }> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    try {
      const https = await import('https');
      return new Promise((resolve) => {
        const options = {
          hostname: domain,
          port: 443,
          method: 'HEAD',
          rejectUnauthorized: false
        };

        const req = https.request(options, (res) => {
          const cert = (res.connection as any).getPeerCertificate();
          if (cert && cert.valid_to) {
            resolve({
              hasSSL: true,
              validUntil: new Date(cert.valid_to),
              issuer: cert.issuer?.CN
            });
          } else {
            resolve({ hasSSL: false });
          }
        });

        req.on('error', () => {
          resolve({ hasSSL: false });
        });

        req.end();
      });
    } catch (error) {
      return { hasSSL: false };
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS
  static getDNSInstructions(domain: CustomDomain): {
    type: string;
    record: string;
    value: string;
    instructions: string;
  } {
    if (domain.type === 'cname') {
      return {
        type: 'CNAME',
        record: domain.domain,
        value: 'platform-verify.com',
        instructions: `–î–æ–±–∞–≤—å—Ç–µ CNAME –∑–∞–ø–∏—Å—å –≤ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞:\n\n–ò–º—è: ${domain.domain}\n–ó–Ω–∞—á–µ–Ω–∏–µ: platform-verify.com\n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω".`
      };
    } else {
      return {
        type: 'TXT',
        record: domain.domain,
        value: domain.verificationValue,
        instructions: `–î–æ–±–∞–≤—å—Ç–µ TXT –∑–∞–ø–∏—Å—å –≤ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞:\n\n–ò–º—è: ${domain.domain}\n–ó–Ω–∞—á–µ–Ω–∏–µ: ${domain.verificationValue}\n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω".`
      };
    }
  }
}