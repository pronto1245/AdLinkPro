import type { Express } from 'express';
import { telegramBot } from '../services/telegramBot';
import { storage } from '../storage';

export function addTelegramRoutes(app: Express) {
  // Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
  app.post('/api/telegram/webhook', async (req, res) => {
    try {
      console.log('üì• Telegram webhook received:', JSON.stringify(req.body, null, 2));

      await telegramBot.handleUpdate(req.body);
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('‚ùå Telegram webhook error:', error);
      res.status(200).json({ ok: true }); // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
    }
  });

  // –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  app.post('/api/telegram/test', async (req, res) => {
    try {
      const { userId, type = 'conversion', data } = req.body;

      console.log('üß™ Testing Telegram notification:', { userId, type, data });

      if (type === 'conversion') {
        await telegramBot.notifyConversion({
          userId,
          offerName: data?.offerName || 'Test Offer',
          partnerName: data?.partnerName || 'Test Partner',
          amount: data?.amount || 100,
          currency: data?.currency || 'USD',
          country: data?.country || 'RU',
          source: data?.source || 'test'
        });
      } else if (type === 'fraud_alert' || type === 'fraud') {
        await telegramBot.notifyFraud({
          userId,
          type: data?.type || 'suspicious_activity',
          description: data?.description || '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          severity: data?.severity || 'medium',
          ipAddress: data?.ipAddress || '127.0.0.1',
          country: data?.country || 'RU'
        });
      } else if (type === 'offer_alert') {
        await telegramBot.sendMessage(
          (await storage.getUserById(userId))?.telegramChatId,
          `üöÄ <b>–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!</b>\n\n–î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä: ${data?.offerName || 'Test Offer'}\n–ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–æ ${data?.payout || '150%'}!\n\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`
        );
      } else if (type === 'system_message') {
        await telegramBot.sendMessage(
          (await storage.getUserById(userId))?.telegramChatId,
          `üîß <b>–°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`
        );
      } else if (type === 'report') {
        await telegramBot.sendDailyReport(userId);
      }

      res.json({ success: true, message: 'Test notification sent' });
    } catch (error) {
      console.error('‚ùå Test notification error:', error);
      res.status(500).json({ error: 'Failed to send test notification' });
    }
  });

  // –ü—Ä–∏–≤—è–∑–∫–∞ Telegram Chat ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.patch('/api/telegram/link', async (req, res) => {
    try {
      const { userId, telegramChatId } = req.body;

      if (!userId || !telegramChatId) {
        return res.status(400).json({ error: 'userId and telegramChatId are required' });
      }

      console.log('üîó Linking Telegram Chat ID:', { userId, telegramChatId });

      await storage.updateUser(userId, { telegramChatId: parseInt(telegramChatId) });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await telegramBot.sendMessage(
        parseInt(telegramChatId),
        '‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö, fraud –∞–ª–µ—Ä—Ç–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.',
        'HTML'
      );

      res.json({ success: true, message: 'Telegram linked successfully' });
    } catch (error) {
      console.error('‚ùå Telegram link error:', error);
      res.status(500).json({ error: 'Failed to link Telegram' });
    }
  });

  // –û—Ç–≤—è–∑–∫–∞ Telegram
  app.delete('/api/telegram/unlink/:userId', async (req, res) => {
    try {
      const { userId } = req.params;

      console.log('üîó Unlinking Telegram for user:', userId);

      await storage.updateUser(userId, { telegramChatId: null });

      res.json({ success: true, message: 'Telegram unlinked successfully' });
    } catch (error) {
      console.error('‚ùå Telegram unlink error:', error);
      res.status(500).json({ error: 'Failed to unlink Telegram' });
    }
  });

  console.log('‚úÖ Telegram routes added successfully');
}
